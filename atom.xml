<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuiryRain的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://quiryrain.tk/"/>
  <updated>2019-05-02T03:47:54.236Z</updated>
  <id>http://quiryrain.tk/</id>
  
  <author>
    <name>QuiryRain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostgreSQL学习总结</title>
    <link href="http://quiryrain.tk/190502-3/"/>
    <id>http://quiryrain.tk/190502-3/</id>
    <published>2019-05-02T03:42:09.000Z</published>
    <updated>2019-05-02T03:47:54.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PG数据库："><a href="#PG数据库：" class="headerlink" title="PG数据库："></a>PG数据库：</h1><p>理解：对于PostgreSQL数据库，我个人理解为和MySQL数据库很相识，比MySQL功能多，在pg数据库中，用户可以指定表集合，这点和mongodb很像。</p><blockquote><p>模式(架构)：是指定的表集合，它还可以包含视图、索引、序列、数据类型、运算符和函数.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建模式:create schema &lt;schemaname&gt;</span><br></pre></td></tr></table></figure><h1 id="架构作用"><a href="#架构作用" class="headerlink" title="架构作用:"></a>架构作用:</h1><blockquote><p>1、模式有助于多用户使用一个数据库,而不会互相干扰</p><p>2、将数据库对象组织成逻辑组,使其更易于管理</p><p>3、可以将第三方模式放入单独的模式中,以避免与其他对象的名称相冲突</p></blockquote><h1 id="PostgreSQL中的连接类型："><a href="#PostgreSQL中的连接类型：" class="headerlink" title="PostgreSQL中的连接类型："></a>PostgreSQL中的连接类型：</h1><ul><li><p>内连接（inner join）显示两个集合共有部分（交集）</p><p>  select table1.columns,table2.columns from table1 inner join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>左外连接（left outer join）显示左集合的全部，右集合不满足的用空补全</p><p>  select table1.columns,table2.columns from table1 left outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>右外连接（right outer join）显示右集合的全部，左集合不满足的用空补全</p><p>  select table1.columns,table2.columns from table1 right outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>全连接（full outer join）显示两个集合的全部，不满足条件的用空补全</p><p>  select table1.columns,table2.columns from table1 full outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>跨连接（cross join）将第一个表的每一行与第二个表的每一行相匹配。</p><p>  select coloums from table1 cross join table2;</p></li><li><p>having子句和group by子句组合使用，用于选择函数结果满足某些条件的特定行。</p></li></ul><h1 id="普通用户创建与登陆："><a href="#普通用户创建与登陆：" class="headerlink" title="普通用户创建与登陆："></a>普通用户创建与登陆：</h1><blockquote><p>1、登陆超级用户：sudo -u postgres psql</p><p>2、创建用户：create user dbuser encrypted password ‘test’;</p><p>3、授权：alter user dbuser with createdb; alter user dbuser with login;</p><p>4、创建dbuser用户的数据集：create database dbusers with owner=’dbuser’;</p><p>5、退出\q</p><p>6、普通用户登陆：psql -U dbuser -d dbusers -h localhost</p></blockquote><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> auditlogfunc() <span class="keyword">returns</span> <span class="keyword">trigger</span> <span class="keyword">as</span> $example_table$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">audit</span>(emp_id,entry_date) <span class="keyword">values</span> (new.ID, <span class="keyword">current_timestamp</span>);</span><br><span class="line">return new</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$example_table$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> example_trigger <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> company <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">execute</span> <span class="keyword">procedure</span> auditlogfunc();</span><br></pre></td></tr></table></figure><blockquote><p>PostgreSQL触发器目的：</p><p>1、验证输入数据</p><p>2、执行业务规则</p><p>3、为不同文件中新插入的行生成唯一值</p><p>4、写入其他文件以急性审计跟踪</p><p>5、从其他文件查询交叉引用目的</p><p>6、访问系统函数</p><p>7、将数据复制到不同的文件以实现数据一致性</p></blockquote><h1 id="触发器的查询、删除："><a href="#触发器的查询、删除：" class="headerlink" title="触发器的查询、删除："></a>触发器的查询、删除：</h1><ul><li>列出当前数据库的所有触发器：select * from pg_trigger;</li><li>列出某张表上的触发器：SELECT tgname FROM pg_trigger, pg_class WHERE tgrelid=pg_class.oid AND relname=’\<tablename>‘;</tablename></li><li>删除触发器：drop trigger &lt;trigger_name&gt;;</li></ul><h1 id="查询创建的函数："><a href="#查询创建的函数：" class="headerlink" title="查询创建的函数："></a>查询创建的函数：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">pg_proc.proname <span class="keyword">AS</span> <span class="string">"函数名称"</span>,</span><br><span class="line">pg_type.typname <span class="keyword">AS</span> <span class="string">"返回值数据类型"</span>,</span><br><span class="line">pg_proc.pronargs <span class="keyword">AS</span> <span class="string">"参数个数"</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">pg_proc </span><br><span class="line"><span class="keyword">JOIN</span> pg_type <span class="keyword">ON</span> (pg_proc.prorettype = pg_type.oid) </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">pg_type.typname != <span class="string">'void'</span> </span><br><span class="line"><span class="keyword">AND</span> </span><br><span class="line">pronamespace = (<span class="keyword">SELECT</span> pg_namespace.oid <span class="keyword">FROM</span> pg_namespace <span class="keyword">WHERE</span> nspname = <span class="string">'public'</span>);</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>用于加速从数据库中检索数据</p><blockquote><p>创建索引:create index index_name on table_name;</p></blockquote><p>响应时间的计算模型：<br>响应时间=网络传输时间（请求）+服务器处理时间（一层或是多层）+网络传输时间（响应）+页面前段解析时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PG数据库：&quot;&gt;&lt;a href=&quot;#PG数据库：&quot; class=&quot;headerlink&quot; title=&quot;PG数据库：&quot;&gt;&lt;/a&gt;PG数据库：&lt;/h1&gt;&lt;p&gt;理解：对于PostgreSQL数据库，我个人理解为和MySQL数据库很相识，比MySQL功能多，在pg数据库
      
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://quiryrain.tk/categories/PostgreSQL/"/>
    
    
      <category term="学习总结" scheme="http://quiryrain.tk/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="PostgreSQL" scheme="http://quiryrain.tk/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Git学习总结</title>
    <link href="http://quiryrain.tk/190502-2/"/>
    <id>http://quiryrain.tk/190502-2/</id>
    <published>2019-05-02T03:39:40.000Z</published>
    <updated>2019-05-02T03:46:55.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git整理："><a href="#git整理：" class="headerlink" title="git整理："></a>git整理：</h1><blockquote><p>工作区中的.git目录为Git版本库，git add将文件提交到暂存区,git commit将文件提交到本地仓库，git push将文件提交到远程仓库。</p></blockquote><h1 id="历史版本回退及提交至远程仓库"><a href="#历史版本回退及提交至远程仓库" class="headerlink" title="历史版本回退及提交至远程仓库"></a>历史版本回退及提交至远程仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  可以回退版本  当回退多个版本时可以使用 HEAD~100（恢复到第100个版本）。</span><br><span class="line">git reflog 用于记录每次的命令，最上方为最近一次的命令</span><br><span class="line">git reset HEAD &lt;file&gt; 将缓存区中的修改回退到工作区。</span><br><span class="line">git checkout -- &lt;file&gt; 将版本库中的版本替换工作区的版本，可以做恢复用。</span><br><span class="line">git push 将当前分支master推送到远程</span><br><span class="line">git commit 将缓存区中的文件推送到分支master(本地)</span><br></pre></td></tr></table></figure><h1 id="分支的创建、切换与合并"><a href="#分支的创建、切换与合并" class="headerlink" title="分支的创建、切换与合并"></a>分支的创建、切换与合并</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt; 创建一个分支并切换，等同于git branch &lt;branch&gt; git checkout &lt;branch&gt;两条命令</span><br><span class="line">git branch 查看当前分支</span><br><span class="line">git merge 命令用于合并指定分支到当前分支</span><br><span class="line">git branch -d &lt;branch&gt; 删除分支</span><br><span class="line">git log --graph 可以查看分支合并图</span><br></pre></td></tr></table></figure><h1 id="对远程分支进行操作"><a href="#对远程分支进行操作" class="headerlink" title="对远程分支进行操作"></a>对远程分支进行操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete branch &lt;branchname&gt;或git push origin :&lt;branchname&gt; 删除远程仓库中的分支</span><br></pre></td></tr></table></figure><blockquote><p>重命名远程分支：<br>1、删除远程分支：git push –delete origin <branchname><br>2、重命名本地分支：git branch -m <old> <new><br>3、推送本地分支：git push origin <newbranchname></newbranchname></new></old></branchname></p></blockquote><h1 id="提交出错解决方法"><a href="#提交出错解决方法" class="headerlink" title="提交出错解决方法"></a>提交出错解决方法</h1><p>如果在提交远程仓库的时候出现“更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支”，此时应该先获取远程更新,然后合并本地的分支，最后提交.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin;# 获取运程仓库</span><br><span class="line">git merge origin/master# 将本地仓库与远程仓库合并</span><br><span class="line"></span><br><span class="line">git pull = git fetch + git merge 可能会产生冲突，需要手动解决</span><br><span class="line"></span><br><span class="line">--no-ff 参数表示禁用Fast forward</span><br></pre></td></tr></table></figure><p>如果出现”您要求从远程 ‘origin’ 拉取，但是未指定一个分支。因为这不是当前分支默认的远程仓库，您必须在命令行中指定一个分支名。”<br>执行以下内容：<br><code>git branch --set-upstream-to corigin/master master</code></p><h2 id="出错时"><a href="#出错时" class="headerlink" title="出错时"></a>出错时</h2><p>出错内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to &apos;https://github.com/bnq456/bnq456.github.io.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br></pre></td></tr></table></figure></p><ul><li>强制推送<br>在确定自己仓库中的内容低于本地仓库中的内容并且确定本地优于远程时，如果无法进行推送，可以选择强制推送<br><code>git push -u origin master -f</code></li><li><p>push前先将远程repository修改pull下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>若不想merge远程和本地修改，可以先创建新的分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch [name]</span><br><span class="line">然后push</span><br><span class="line">git push -u origin [name]</span><br></pre></td></tr></table></figure></li></ul><h2 id="fetch-和-pull的区别："><a href="#fetch-和-pull的区别：" class="headerlink" title="fetch 和 pull的区别："></a>fetch 和 pull的区别：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git fetch：将远程主机的最新内容拉取到本地，是否合并由用户决定。</span><br><span class="line">git pull：将远程主机的最新内容拉取到本地后直接合并，可能会产生冲突，需要手动解决。</span><br><span class="line">解决方法：</span><br><span class="line">git reset --hard FETCH_HEAD</span><br><span class="line">git pull</span><br><span class="line">注：将本地的冲突文件冲掉，不仅需要reset到MERGE-HEAD或HEAD，还需要--hard。当后面没有hard，不会冲掉本地工作区，只会冲掉stage区。</span><br></pre></td></tr></table></figure><p><img src="/userImages/fetch_and_pull.png" alt="fetch和pull的不同"></p><h1 id="Git中工作环境的临时存储与恢复"><a href="#Git中工作环境的临时存储与恢复" class="headerlink" title="Git中工作环境的临时存储与恢复"></a>Git中工作环境的临时存储与恢复</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash 把当前工作现场存储起来，用于以后恢复现场继续工作</span><br><span class="line">切换回工作时：</span><br><span class="line">git stash list 列出所有存储的工作环境</span><br><span class="line">result: stash@&#123;0&#125;: WIP on dev: cc559a8 add merge</span><br><span class="line">git stash pop 切回工作场景，或git stash apply stash@&#123;0&#125; 恢复后不删除stash中的内容，需要使用git stash drop &lt;name&gt;删除</span><br></pre></td></tr></table></figure><blockquote><p>pop和 apply的区别<br>pop是将工作环境切回后直接删除<br>apply是先应用工作环境，然后存储的工作环境是否删除由用户自己决定。使用：git stash drop <name>进行删除</name></p></blockquote><blockquote><p>实验性质的代码最好新建分支</p></blockquote><h1 id="分支的创建、删除、合并与推送"><a href="#分支的创建、删除、合并与推送" class="headerlink" title="分支的创建、删除、合并与推送"></a>分支的创建、删除、合并与推送</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchname&gt;</span><br><span class="line">git checkout &lt;branchname&gt;</span><br><span class="line">以上两条命令等同于git checkout -b &lt;branchname&gt;</span><br><span class="line">git branch -D &lt;name&gt; 表示强行删除一个分支</span><br><span class="line">git merge &lt;branchname&gt; 分支的合并，表示要将&lt;branchname&gt;分支合并到当前分支上</span><br><span class="line"></span><br><span class="line">分支的推送：</span><br><span class="line">master分支是主分支，因此要时刻与远程同步;</span><br><span class="line">dev分支是开发分支，团队所有成员都需要在上面工作，所以需要时刻与远程同步;</span><br><span class="line">bug分支是本地修复bug，可推送可不推送;</span><br><span class="line">feature分支取决与是否在上面进行开发。</span><br></pre></td></tr></table></figure><h1 id="多人协作："><a href="#多人协作：" class="headerlink" title="多人协作："></a>多人协作：</h1><blockquote><p>1、首先，可以试图用git push origin <branch-name>推送自己的修改；</branch-name></p></blockquote><blockquote><p>2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p></blockquote><blockquote><p>3、如果合并有冲突，则解决冲突，并在本地提交；</p></blockquote><blockquote><p>4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！</branch-name></p></blockquote><blockquote><p>5、如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin/<branch-name>。</branch-name></branch-name></p></blockquote><h1 id="rebase：（不是很了解）"><a href="#rebase：（不是很了解）" class="headerlink" title="rebase：（不是很了解）"></a>rebase：（不是很了解）</h1><blockquote><p>rebase操作可以将本地未push的分叉提交历史整理成一条直线;<br>rebase的目的是使我们在查看提交的变化时更容易，因为分叉的提交需要三方比较。</p></blockquote><h1 id="git-标签："><a href="#git-标签：" class="headerlink" title="git 标签："></a>git 标签：</h1><p>git tag <name>用于新建一个标签,默认为HEAD，当创建带有说明的标签时，用-a指定标签名，-m指定说明文字<br>git tag可以查看所有的标签<br>当给以前忘记打标签的项目打标签时，可以先找出要打标签项目的编号，然后git tag <tagname> <commit id><br>-d用于删除标签<br>    远程标签推送：<br>    git push origin <tagname>推送一个本地标签到远程<br>    git push origin –tags 将所有标签推送到远程</tagname></commit></tagname></name></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当删除远程标签时：</span><br><span class="line">1、首先先删除本地的标签 git tag -d &lt;tagname&gt;</span><br><span class="line">2、然后删除远程的标签 git push origin :refs/tags/&lt;tagname&gt;或者git push origin --delete tag &lt;tagname&gt;（作用与上两步相同）</span><br></pre></td></tr></table></figure><h1 id="日志文件查询"><a href="#日志文件查询" class="headerlink" title="日志文件查询"></a>日志文件查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git整理：&quot;&gt;&lt;a href=&quot;#git整理：&quot; class=&quot;headerlink&quot; title=&quot;git整理：&quot;&gt;&lt;/a&gt;git整理：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;工作区中的.git目录为Git版本库，git add将文件提交到暂存区,git c
      
    
    </summary>
    
      <category term="Git" scheme="http://quiryrain.tk/categories/Git/"/>
    
    
      <category term="学习总结" scheme="http://quiryrain.tk/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Git" scheme="http://quiryrain.tk/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习总结</title>
    <link href="http://quiryrain.tk/190502-1/"/>
    <id>http://quiryrain.tk/190502-1/</id>
    <published>2019-05-02T03:37:44.000Z</published>
    <updated>2019-05-02T03:59:00.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-中的三个基本概念"><a href="#Docker-中的三个基本概念" class="headerlink" title="Docker 中的三个基本概念"></a>Docker 中的三个基本概念</h2><ul><li>镜像(Image)</li><li>容器(Container)</li><li>仓库(Repository)</li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>镜像不包含任何动态数据，其内容在构建之后也不会改变</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyname .<span class="comment"># 使用此目录的 Dockerfile 创建镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 4000:80 friendlyname  <span class="comment"># 运行端口 4000 到 90 的“友好名称”映射</span></span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 4000:80 friendlyname         <span class="comment"># 内容相同，但在分离模式下</span></span></span><br><span class="line">docker ps                                 <span class="comment"># 查看所有正在运行的容器的列表</span></span><br><span class="line">docker stop &lt;hash&gt;                     <span class="comment"># 平稳地停止指定的容器</span></span><br><span class="line">docker ps -a           <span class="comment"># 查看所有容器的列表，甚至包含未运行的容器</span></span><br><span class="line">docker kill &lt;hash&gt;                   <span class="comment"># 强制关闭指定的容器</span></span><br><span class="line">docker rm &lt;hash&gt;              <span class="comment"># 从此机器中删除指定的容器</span></span><br><span class="line">docker rm $(docker ps -a -q)           <span class="comment"># 从此机器中删除所有容器</span></span><br><span class="line">docker images -a                               <span class="comment"># 显示此机器上的所有镜像</span></span><br><span class="line">docker rmi &lt;imagename&gt;            <span class="comment"># 从此机器中删除指定的镜像</span></span><br><span class="line">docker rmi $(docker images -q)             <span class="comment"># 从此机器中删除所有镜像</span></span><br><span class="line">docker login             <span class="comment"># 使用您的 Docker 凭证登录此 CLI 会话</span></span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  <span class="comment"># 标记 &lt;image&gt; 以上传到镜像库</span></span><br><span class="line">docker push username/repository:tag            <span class="comment"># 将已标记的镜像上传到镜像库</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> username/repository:tag                   <span class="comment"># 运行镜像库中的镜像</span></span></span><br><span class="line">docker stack ls              <span class="comment"># 列出此 Docker 主机上所有正在运行的应用</span></span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class="comment"># 运行指定的 Compose 文件</span></span><br><span class="line">docker stack services &lt;appname&gt;       <span class="comment"># 列出与应用关联的服务</span></span><br><span class="line">docker stack ps &lt;appname&gt;   <span class="comment"># 列出与应用关联的正在运行的容器</span></span><br><span class="line">docker stack rm &lt;appname&gt;                             <span class="comment"># 清除应用</span></span><br><span class="line">docker-machine create --driver virtualbox myvm1 <span class="comment"># 创建 VM（Mac、Win7、Linux）</span></span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm1 <span class="comment"># Win10</span></span><br><span class="line">docker-machine <span class="keyword">env</span> myvm1                <span class="comment"># 查看有关节点的基本信息</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node ls"</span>         <span class="comment"># 列出 swarm 中的节点</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node inspect &lt;node ID&gt;"</span>        <span class="comment"># 检查节点</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm join-token -q worker"</span>   <span class="comment"># 查看加入令牌</span></span><br><span class="line">docker-machine ssh myvm1   <span class="comment"># 打开与 VM 的 SSH 会话；输入“exit”以结束会话</span></span><br><span class="line">docker-machine ssh myvm2 <span class="string">"docker swarm leave"</span>  <span class="comment"># 使工作节点退出 swarm</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm leave -f"</span> <span class="comment"># 使主节点退出，终止 swarm</span></span><br><span class="line">docker-machine start myvm1            <span class="comment"># 启动当前未运行的 VM</span></span><br><span class="line">docker-machine stop $(docker-machine ls -q)               <span class="comment"># 停止所有正在运行的 VM</span></span><br><span class="line">docker-machine rm $(docker-machine ls -q) <span class="comment"># 删除所有 VM 及其磁盘镜像</span></span><br><span class="line">docker-machine scp docker-compose.yml myvm1:~     <span class="comment"># 将文件复制到节点的主目录</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker stack deploy -c &lt;file&gt; &lt;app&gt;"</span>   <span class="comment"># 部署应用</span></span><br></pre></td></tr></table></figure><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker save -o &lt;localfilename&gt; &lt;flename&gt; <span class="comment">#导出镜像到本地文件</span></span><br><span class="line">docker load --input &lt;filename&gt; <span class="comment">#从导出的本地文件中再导入到本地镜像库</span></span><br><span class="line">docker load &lt; &lt;filename&gt; <span class="comment">#同上，导入镜像以及其相关的元数据信息(包括标签等)(生成镜像文件)</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d ... <span class="comment"># 使docker容器在后台以守护态形式运行</span></span></span><br><span class="line">docker export &lt;container id&gt; &gt; &lt;localfilename&gt; <span class="comment"># 将本地的某个容器导出</span></span><br><span class="line">docker import - &lt;repository:tag&gt; <span class="comment"># 将容器快照文件导入为镜像 (生成镜像快照)</span></span><br><span class="line">docker load 和 docker import 的区别：</span><br><span class="line">  docker import 将丢弃所有的历史记录和元数据信息(仅保存容器当时的快照状态)，</span><br><span class="line">  docker load 将保存完整记录，体积较大</span><br><span class="line">  docker import 导入时可以重新指定标签等元数据信息</span><br><span class="line">docker image ls --digests <span class="comment"># 列出所有镜像的摘要</span></span><br><span class="line">docker image rm &lt;id、repository:tag&gt; <span class="comment"># 删除镜像，在通过id删除时，可以指定前3个字符以上，但是要能足够用于区分别的镜像</span></span><br><span class="line">docker image rm &lt;digest&gt; <span class="comment"># 精确删除</span></span><br></pre></td></tr></table></figure><p><em>Union FS 是有最大层数限制的,比如 AUFS，一个镜像不能超过127层</em></p><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><p>仓库名、标签均为<code>&lt;none&gt;</code>的镜像，被称为虚悬镜像</p><p>显示虚悬镜像：<code>docker image ls -f dangling=true</code></p><p>删除虚悬镜像：<code>docker image prune</code></p><h2 id="docker-中的过滤器"><a href="#docker-中的过滤器" class="headerlink" title="docker 中的过滤器"></a>docker 中的过滤器</h2><p>在docker image ls还支持使用过滤器参数 –filter或-f</p><ul><li>since 在某个镜像之后建立的镜像</li><li>before在某个镜像之前建立的镜像</li><li>dangling未打开标签</li></ul><p>镜像是多层存储,每一层是在前一层的基础上进行的修改;而容器同样也是多层存储,是在以镜像为基础层,在其基础上加一层作为容器运行时的存储层。</p><p>镜像的定制实际上就是定制每一层所添加的配置、文件.</p><p>在构建Dockerfile时，如果使用了scratch为基础镜像，意味着不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始，这样减少了镜像体积。</p><h2 id="从标准输入中读取Dockerfile"><a href="#从标准输入中读取Dockerfile" class="headerlink" title="从标准输入中读取Dockerfile"></a>从标准输入中读取Dockerfile</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br><span class="line">或</span><br><span class="line">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure><p>如果标准输入传入的是文本文件，则将其视为<code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取Dockerfile的内容，它没有上下文，因此不以像其他方法那样将文本文件<code>Copy</code>进镜像之类的事情</p><h2 id="ADD中更高级的复制文件"><a href="#ADD中更高级的复制文件" class="headerlink" title="ADD中更高级的复制文件"></a>ADD中更高级的复制文件</h2><p>ADD指令将会自动解压缩这个压缩文件到&lt;目标路径&gt;</p><h2 id="COPY和ADD指令选择时遵循的原则"><a href="#COPY和ADD指令选择时遵循的原则" class="headerlink" title="COPY和ADD指令选择时遵循的原则"></a>COPY和ADD指令选择时遵循的原则</h2><p>所有文件复制均使用COPY指令,仅在需要自动解压缩的场合使用ADD</p><p>Docker 不是虚拟机,容器中的应用都应该以前台执行,而不是像虚拟机、物理机里面那样,用upstart/systemd 去启动后台服务,容器内没有后台服务的概念。<br>启动程序就是容器应用进程,容器就是为了主进程而存在的,主进程退出,容器就失去了存在的意义。<br>当使用ENTRYPOINT后，CMD的内容将会作为参数传给ENTRYPOINT。</p><p><code>EXPOSE</code>指令是声明运行时容器提供的服务端口</p><p><code>WORKDIR</code>可以来指定工作目录(或者称为当前目录)，以后各层的当前目录就被改为指定的目录，如果目录不存在，WORKDIR自动创建目录。</p><p><code>USER</code>和<code>WORKDIR</code>都是改变环境状态并影响以后的层。<code>WORKDIR</code>是改变工作目录，<code>USER</code>则是改变之后层的执行<code>RUN</code>、<code>CMD</code>以及<code>ENTRYPOINT</code>这类命令的身份。</p><p><code>HEALTHCHECK</code>支持下列选项:</p><ul><li>–interval=&lt;间隔&gt; :两次健康检查的间隔,默认为 30 秒;</li><li>–timeout=&lt;时长&gt; :健康检查命令运行超时时间,如果超过这个时间,本次健康检查就被视为失败,默认 30 秒;</li><li>–retries=&lt;次数&gt; :当连续失败指定次数后,则将容器状态视为<em>unhealthy</em>,默认3次。</li></ul><p><em><code>CMD</code>、<code>ENTRYPOINT</code>、<code>HEALTHCHECK</code>三者的共同点：在Dockerfile文件中只可以出现一次，如果出现多次，只有最后一个生效。</em></p><h2 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker export container_id &gt; export_filename.tar</span><br><span class="line"></span><br><span class="line">cat export_filename.tar | docker import - repository:tag</span><br></pre></td></tr></table></figure><p>此处利用了Linux中的管道，将一个镜像文件从一台机器迁移到另一台机器</p><h2 id="docker-attach和docker-exec的区别"><a href="#docker-attach和docker-exec的区别" class="headerlink" title="docker attach和docker exec的区别"></a>docker attach和docker exec的区别</h2><p>相同点：</p><ul><li>两者都可以使用-d、-i参数，在同时使用这两个参数时，都是进入bash</li><li>-i参数是没有分配伪终端，但命令执行结果仍然返回</li></ul><p>不同点：</p><ul><li>在使用attach进入伪终端，输入exit退出时，会导致容器的停止</li><li>exec进入终端，输入exit退出时，不会导致容器的停止</li></ul><h2 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container rm 容器名称</span><br><span class="line">docker container prune <span class="comment"># 清理所有处于终止状态的容器</span></span><br></pre></td></tr></table></figure><p>如果要删除一个运行中的容器,可以添加-f参数。Docker 会发送SIGKILL信号给容器。</p><h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p>在容器中管理数据主要有两种方式：</p><ul><li>数据卷(Volumes)</li><li>挂载主机目录(Bind mounts)</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在同期之间共享和重用</li><li>对数据卷的修改会立即生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷默认一直存在，即使容器被删除</li></ul><h3 id="数据卷操作命令"><a href="#数据卷操作命令" class="headerlink" title="数据卷操作命令"></a>数据卷操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker volume create &lt;volumename&gt; # 创建一个数据卷</span><br><span class="line">docker volume ls # 查看所有数据卷</span><br><span class="line">docker inspect &lt;contrainer name&gt; # 查看容器的信息</span><br><span class="line">docker volume rm &lt;volumename&gt; # 删除数据卷</span><br></pre></td></tr></table></figure><p>在用docker run命令的时候，使用 –mount标记来将数据卷挂载到容器里，在一次docker run中可以挂载多个数据卷。</p><p>数据卷是被设计用来持久化数据的，它的声明周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收机制。</p><h3 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h3><p>在容器中运行一个网络应用，要让外部也可以访问这些应用，可以通过-P或-p参数来执行端口映射</p><p>在使用<code>-P</code>标记时，Docker会随机映射一个<code>49000~49900</code>的端口到内部容器开放的网络端口。</p><h2 id="Compose中的两个重要概念"><a href="#Compose中的两个重要概念" class="headerlink" title="Compose中的两个重要概念"></a>Compose中的两个重要概念</h2><ul><li>服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目（project）：由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li></ul><h2 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h2><p>命令选项</p><ul><li>-f, –file FILE 指定使用的 Compose 模板文件,默认为<code>docker-compose.yml</code>,可以多次指定。</li><li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。</li><li>–x-networking 使用Docker的可拔插网络后端特性</li><li>–x-network-driver DRIVER 指定网络后端的驱动，默认为<code>bridge</code></li><li>–verbose 输出更多调试信息</li><li>-v, –version打印版本并退出</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-中的三个基本概念&quot;&gt;&lt;a href=&quot;#Docker-中的三个基本概念&quot; class=&quot;headerlink&quot; title=&quot;Docker 中的三个基本概念&quot;&gt;&lt;/a&gt;Docker 中的三个基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;镜像(Image)&lt;/l
      
    
    </summary>
    
      <category term="Docker" scheme="http://quiryrain.tk/categories/Docker/"/>
    
    
      <category term="学习总结" scheme="http://quiryrain.tk/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Docker" scheme="http://quiryrain.tk/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python3爬虫之urllib模块</title>
    <link href="http://quiryrain.tk/190502/"/>
    <id>http://quiryrain.tk/190502/</id>
    <published>2019-05-02T02:45:54.000Z</published>
    <updated>2019-05-02T02:48:05.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python2-中的urllib和Python3中的urlllib的区别"><a href="#Python2-中的urllib和Python3中的urlllib的区别" class="headerlink" title="Python2 中的urllib和Python3中的urlllib的区别"></a>Python2 中的urllib和Python3中的urlllib的区别</h3><p>在python 2中有urllib和urllib2两个库进行实现请求的发送，但是再python 3中官方将urllib2库合并在了urllib库中。所以在3中使用urllib库时一定要先了解其中的四个模块：</p><ul><li>request：这个模块是最基本的HTTP请求模块，用来模拟发送请求。</li><li>error：异常处理模块，用来捕获异常，保证程序不会意外终止。</li><li>parse：工具模块，提供了许多URL处理方法，如拆分、解析、编码等</li><li>robotparser:用来识别网站的robots.txt文件，判断哪些网站可以爬，一般不用。<br>此处只讲解前三个的用法。</li></ul><h3 id="请求的发送"><a href="#请求的发送" class="headerlink" title="请求的发送"></a>请求的发送</h3><p>1、urlopen()函数<br>在urllib.request模块中提供了最基本的构造HTTP请求的方法，可以利用它进行模拟浏览器发送一个请求，同时它还具有处理授权验证、重定向、浏览器cookies等其他内容<br>下面以百度为例子，进行网页的抓取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line">response = request.urlopen(&apos;http://www.baidu.com&apos;)</span><br><span class="line">print(response.read().decode(&apos;utf8&apos;))</span><br></pre></td></tr></table></figure></p><p>可以很简单的看出，上面很简单的三行代码已经实现了一个简单的爬虫了。只不过这个爬虫获取下来的内容没有经过任何数据处理，我们可以很容的看到百度首页的源代码。<br>之后，查看返回的内容是什么类型的。<br><code>print(type(response))</code><br>输出为：<code>&lt;class &#39;http.client.HTTPResponse&#39;&gt;</code><br>可以发现，它是一个HTTPResponse类型的对象，接下来查看有那些函数和属性，使用<code>dir(response)</code>：<br>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;__abstractmethods__&apos;, &apos;__class__&apos;, &apos;__del__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__enter__&apos;, &apos;__eq__&apos;, &apos;__exit__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__next__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;_abc_impl&apos;, &apos;_checkClosed&apos;, &apos;_checkReadable&apos;, &apos;_checkSeekable&apos;, &apos;_checkWritable&apos;, &apos;_check_close&apos;, &apos;_close_conn&apos;, &apos;_get_chunk_left&apos;, &apos;_method&apos;, &apos;_peek_chunked&apos;, &apos;_read1_chunked&apos;, &apos;_read_and_discard_trailer&apos;, &apos;_read_next_chunk_size&apos;, &apos;_read_status&apos;, &apos;_readall_chunked&apos;, &apos;_readinto_chunked&apos;, &apos;_safe_read&apos;, &apos;_safe_readinto&apos;, &apos;begin&apos;, &apos;chunk_left&apos;, &apos;chunked&apos;, &apos;close&apos;, &apos;closed&apos;, &apos;code&apos;, &apos;debuglevel&apos;, &apos;detach&apos;, &apos;fileno&apos;, &apos;flush&apos;, &apos;fp&apos;, &apos;getcode&apos;, &apos;getheader&apos;, &apos;getheaders&apos;, &apos;geturl&apos;, &apos;headers&apos;, &apos;info&apos;, &apos;isatty&apos;, &apos;isclosed&apos;, &apos;length&apos;, &apos;msg&apos;, &apos;peek&apos;, &apos;read&apos;, &apos;read1&apos;, &apos;readable&apos;, &apos;readinto&apos;, &apos;readinto1&apos;, &apos;readline&apos;, &apos;readlines&apos;, &apos;reason&apos;, &apos;seek&apos;, &apos;seekable&apos;, &apos;status&apos;, &apos;tell&apos;, &apos;truncate&apos;, &apos;url&apos;, &apos;version&apos;, &apos;will_close&apos;, &apos;writable&apos;, &apos;write&apos;, &apos;writelines&apos;]</span><br></pre></td></tr></table></figure></p><p>其中最主要函数为：read()、readinto()、getheader(name)、getheaders()、fileno()等方法。<br>在调用read()方法时可以返回网页内容，使用status属性可以查看返回的状态码。<br>在urlopen()方法中，最基本的是简单网页的GET请求抓取。但是如果要传入一个参数呢？下面就讲解参数的使用方法。  </p><ol><li>data参数<br>在讲解之前，首先需要说明的是data参数是可选的，如果传入了此参数，要以字节流编码格式的内容，即bytes类型，需要进行转化。此时的请求方式不再是GET方法，而是POST方法.因为如果使用GET方法，会将传入data暴露在url中，十分不安全。<br>实例一:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, parse</span><br><span class="line"></span><br><span class="line">data = bytes(parse.urlencode(&#123;&apos;word&apos;: &apos;hello world&apos;&#125;), encoding=&apos;utf8&apos;)</span><br><span class="line">response = request.urlopen(&apos;http://httpbin.org/post&apos;, data=data)</span><br><span class="line">print(response.read().decode(&apos;utf8&apos;))</span><br></pre></td></tr></table></figure></li></ol><p>这里我们传入了一个参数word，值为hello world。由于发送的的data需要是字节流类型，此处使用到了上文提到的工具包函数parse，使用它将我们要传入的函数进行转码。在我们执行完这段代码后，服务器会给我们返回一下结果:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;word&quot;: &quot;hello world&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Python-urllib/3.7&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;115.60.58.52&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时我们可以很容易的看到，在返回的结果中有form字段，字段中的内容就是我们传入的data中的内容，至此我们已经模拟了表单提交的过程，以POST请求方式尽心传输数据。  </p><ol start="2"><li>timeout参数<br>顾名思义，这个参数就是用来设置超时的。单位为秒，意思是当请求超出了设置的值后还有得到响应，就讲异常抛出。如果此参数不指定时间，使用全局默认时间。<br>实例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line">response = request .urlopen(&apos;http://httpbin.org/get&apos;, timeout=0.1)</span><br><span class="line">print(response .read().decode(&apos;utf8&apos;))</span><br></pre></td></tr></table></figure></li></ol><p>运行结果：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test_urllib_001.py&quot;, line 14, in &lt;module&gt;</span><br><span class="line">    response = request .urlopen(&apos;http://httpbin.org/get&apos;, timeout=0.1)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 222, in urlopen</span><br><span class="line">    return opener.open(url, data, timeout)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 525, in open</span><br><span class="line">    response = self._open(req, data)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 543, in _open</span><br><span class="line">    &apos;_open&apos;, req)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 503, in _call_chain</span><br><span class="line">    result = func(*args)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 1345, in http_open</span><br><span class="line">    return self.do_open(http.client.HTTPConnection, req)</span><br><span class="line">  File &quot;/home/rain/.pyenv/versions/3.7.0/lib/python3.7/urllib/request.py&quot;, line 1319, in do_open</span><br><span class="line">    raise URLError(err)</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure></p><p>这里我们设置了超时的时间是0.1秒。程序再执行0.1秒以后，服务器依然没有任何响应，于是抛出了URLError异常。可以从<code>&lt;urlopen error timed out&gt;</code>看出是网络超时。那么问题来了，如何抓取这种情况呢？<br>实例：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, error</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = request .urlopen(&apos;http://httpbin.org/get&apos;, timeout=0.1)</span><br><span class="line">except error.URLError as e:</span><br><span class="line">    if isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(&apos;Time Out&apos;)</span><br></pre></td></tr></table></figure></p><p>我们用try: … except: …来捕获异常，此处引入了socket模块。  </p><p>2、Request<br>到此，我们知道了如何用urlopen方法实现一个简单的请求发送。但是这些简单参数有时候并不能满足我们的需求，比如我们需要在请求中添加header，此时就需要一个更加强大的类来实现了，这就是本节要讲的Request类。<br>实例是最好的验证。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line">req = request.Request(&apos;https://baidu.com&apos;)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure></p><p>此处我们依然使用了上文的urlopen()方法，只是此时的参数不再是一个URL了，而是一个Request对象。另外，这个函数我们可以很灵活的配置我们需要的参数。看下它的构造方法吧：<br><code>urllib.request.Request(url, data=None, headers={},origin_req_host=None, unverifiable=False,method=None)</code><br>  解释下：</p><ul><li>url：请求的URL，必填项</li><li>data：字节流，请求时需要带的数据</li><li>header：请求头，在创建实例后可以通过add_header()添加</li><li>origin_req_host: 请求方的host名称或IP地址</li><li>unverifiable：表示请求是否无法是验证的，默认为False。意思是用户没有足够的权限来选择接收这个请求的结果。</li><li>method：请求是用的方法，如GET、POST等</li></ul><p>下面实现一个多参数构建请求的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, parse</span><br><span class="line"></span><br><span class="line">url = &apos;http://httpbin.org/post&apos;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&apos;</span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;</span><br><span class="line">    &apos;name&apos;: &quot;spider_road&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data= bytes(parse.urlencode(dict), encoding=&apos;utf8&apos;)</span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method =&apos;POST&apos;)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(&apos;utf8&apos;))</span><br></pre></td></tr></table></figure></p><p>我们通过四个参数四个参数构建了这个请求，运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;spider_road&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;115.60.58.52&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><p>在上节中，我们简单的提到了如何对异常做出处理，但是程序在运行过程总会出现一些其他的错误，当出现这些错误时，异常处理还是很有必要做的。<br>1、URLError<br>URLError类来自于urllib库的error模块，继承自OSError类，由request模块产生的异常都已使用这个类来捕捉。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, error</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = request.urlopen(&apos;https://spider-road.com&apos;)</span><br><span class="line">except error.URLError as e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure></p><p>上面的程序我们使用它打开了一个不存在的网址，我们使用try:… except:…来捕获了异常。<br>运行输出：<code>[Errno -2] Name or service not known</code>，此时有效得避免了程序异常终止。</p><p>2、HTTPError<br>它是URLError的子类，用来处理HTTP请求错误，比如认证请求失败等。它有一下3个属性：</p><ul><li>code： http状态码</li><li>reason：错误原因</li><li>headers： 返回请求头</li></ul><p>实例验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request, error</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = request.urlopen(&apos;https://spider-road.com&apos;)</span><br><span class="line">except error.HTTPError as e:</span><br><span class="line">    print(f&apos;code:&#123;e.code&#125;\nreason:&#123;e.reason&#125;\nheaders:&#123;e.headers&#125;&apos;)</span><br><span class="line">except error.URLError as e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure></p><p>由于没有该网站，所以最后返回的是：<code>[Errno 110] Connection timed out</code><br>至此，关于urllib请求和错误处理已经讲解完毕，后续还有关于此节更为高级的用法。欢迎订阅爬虫之道，我们在这里等待你的到来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python2-中的urllib和Python3中的urlllib的区别&quot;&gt;&lt;a href=&quot;#Python2-中的urllib和Python3中的urlllib的区别&quot; class=&quot;headerlink&quot; title=&quot;Python2 中的urllib和Pyt
      
    
    </summary>
    
      <category term="Python后端" scheme="http://quiryrain.tk/categories/Python%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="爬虫" scheme="http://quiryrain.tk/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="http://quiryrain.tk/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>在Centos中架设ss服务</title>
    <link href="http://quiryrain.tk/190425/"/>
    <id>http://quiryrain.tk/190425/</id>
    <published>2019-04-25T03:05:00.000Z</published>
    <updated>2019-04-25T03:44:08.964Z</updated>
    
    <content type="html"><![CDATA[<p>想必大家都被国内的“墙”折磨过，是不是很难受，是不是有时候很无能为力。这里就为大家介绍几种上网的方式。</p><h3 id="Google访问助手"><a href="#Google访问助手" class="headerlink" title="Google访问助手"></a>Google访问助手</h3><p>如果你使用的是这种方式，那么恭喜你，下面介绍的内容和你无关了。</p><p>Google访问助手下载链接：<a href="http://ggfwzs.com/" target="_blank" rel="noopener">链接</a></p><h3 id="架设SS服务"><a href="#架设SS服务" class="headerlink" title="架设SS服务"></a>架设SS服务</h3><p>架设环境</p><ul><li>一台可以访问外网的VPS服务器</li><li>Centos7 + Python2.x</li></ul><p>架设步骤</p><ul><li>安装必须的软件包:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade -y</span><br><span class="line">yum groupinstall &quot;Development Tools&quot;</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install python-setuptools python-pip m2crypto -y</span><br><span class="line"></span><br><span class="line">## 更新pip包</span><br><span class="line">python -m pip install -U pip</span><br><span class="line"></span><br><span class="line">## 安装shadowsocks</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><ul><li><p>创建配置文件</p><p>以下内容是创建唯一密码和端口的配置文件，如果多用户使用，建议直接使用多用户配置.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">### 单用户配置</span><br><span class="line">vim /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;server_port&quot;:server_port,    #例如5460</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;password&quot;:&quot;password&quot;,</span><br><span class="line">  &quot;timeout&quot;:600,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 多用户配置</span><br><span class="line">vim /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">第一种：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;your_server_ip&quot;, # 或者使用 0.0.0.0</span><br><span class="line">  &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;port_password&quot;:&#123;   #端口号与密码</span><br><span class="line">    &quot;8989&quot;:&quot;password0&quot;,   # 左边是端口号，右边是密码</span><br><span class="line">    &quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">    &quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">    &quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">    &quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;:300,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">第二种：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;port_password&quot;:&#123;</span><br><span class="line">    &quot;40001&quot;: &quot;password1&quot;,</span><br><span class="line">    &quot;40002&quot;: &quot;password2&quot;,</span><br><span class="line">    &quot;40003&quot;: &quot;password3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_comment&quot;:&#123;</span><br><span class="line">    &quot;40001&quot;: &quot;xiaoming&quot;,</span><br><span class="line">    &quot;40002&quot;: &quot;lilei&quot;,</span><br><span class="line">    &quot;40003&quot;: &quot;mike&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>系统级服务关闭</p><p>在配置完成后，需要关闭防火墙，否者会造成无法科学上网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop iptables</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>若配置完成，且防火墙关闭，依旧无法科学上网，那么看是否是浏览器设置问题，若浏览器有FQ插件且处于启用状态（浏览器启用代理），停用它。</p></li><li><p>测试是否可用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 开启ss服务</span><br><span class="line">ssserver -c /etc/shadowsocks.json start</span><br></pre></td></tr></table></figure><p>如果可以使用，则说明配置完成</p></li><li><p>将SS服务变为系统级服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/shadowsocks.service</span><br><span class="line"></span><br><span class="line">### 将以下内容粘贴到打开的shadowsocks.service文件中</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable shadowsocks &amp;&amp; systemctl start shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>为OpenVZ的VPS服务器做BBR加速</p><p>本安装<strong>适用于CentOS/RHEL7+，Ubuntu15+，Debian8+</strong> 的64位系统，如不是请先重装系统，下载rintd二进制文件(原版bbr和修改版bbr二选一即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/mixool/rinetd/master/rinetd</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/mixool/rinetd/master/rinetd_bbr_powered -O /root/rinetd</span><br></pre></td></tr></table></figure><p>最后一个为魔改版BBR，上面一个为原版。选一个下载就可以了。然后修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x rinetd</span><br></pre></td></tr></table></figure><p>修改rinetd的配置文件rinetd.conf,添加监听地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim rinetd.conf</span><br><span class="line"></span><br><span class="line"># bindadress bindport connectaddress connectport </span><br><span class="line">0.0.0.0 443 0.0.0.0 443</span><br><span class="line"></span><br><span class="line">0.0.0.0 80 0.0.0.0 80</span><br></pre></td></tr></table></figure><p>每一行都是一个端口，将端口改成你使用的端口就可以了。不要问我一行为什么要写两个相同的，我也不知道为什么。</p></li><li><p>将rinetd变为系统级应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/rinetd.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=rinetd</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/root/rinetd -f -c /root/rinetd.conf raw venet0:0</span><br><span class="line">Restart=always</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable rinetd &amp;&amp; systemctl start rinetd</span><br></pre></td></tr></table></figure><p>在以上操作完毕后，OpenVZ架构的VPS服务器在使用SS服务时，会明显感觉到访问速度快了很多。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想必大家都被国内的“墙”折磨过，是不是很难受，是不是有时候很无能为力。这里就为大家介绍几种上网的方式。&lt;/p&gt;
&lt;h3 id=&quot;Google访问助手&quot;&gt;&lt;a href=&quot;#Google访问助手&quot; class=&quot;headerlink&quot; title=&quot;Google访问助手&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="科学上网" scheme="http://quiryrain.tk/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="ss" scheme="http://quiryrain.tk/tags/ss/"/>
    
      <category term="科学上网" scheme="http://quiryrain.tk/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows10中Tensorflow GPU的安装</title>
    <link href="http://quiryrain.tk/190418/"/>
    <id>http://quiryrain.tk/190418/</id>
    <published>2019-04-18T00:27:27.000Z</published>
    <updated>2019-04-18T01:49:21.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tensorflow介绍"><a href="#Tensorflow介绍" class="headerlink" title="Tensorflow介绍"></a>Tensorflow介绍</h3><blockquote><p>TensorFlow™是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。</p></blockquote><h3 id="Tensorflow2-0-GPU版的安装"><a href="#Tensorflow2-0-GPU版的安装" class="headerlink" title="Tensorflow2.0 GPU版的安装"></a>Tensorflow2.0 GPU版的安装</h3><p>首先，先确定你要安装的是Tensorflow的CPU版还是GPU版。如果是CPU，请出门右转（开个玩笑）。</p><p>其次，Tensorflow分为1.x版本和2.x版本。在本文写的时候，Tensorflow刚出到2.0（preview）版本。对于本文而言，均采用pip的方式安装Tensorflow，并没有采用源码编译的方式。</p><p>如果你在pip安装的时候下载很慢，建议你pip使用<a href="https://opsx.alibaba.com/mirror?lang=zh-CN" target="_blank" rel="noopener">阿里开源镜像</a>源。具体配置方法为：</p><p>在阿里开源镜像中找到<code>pypi</code>，然后点击帮助。  </p><p>打开<code>C:\User\XXX</code>，然后在其中创建pip文件夹，打开刚创建的pip文件夹，在其中创建<code>pip.ini</code>文件。最后将下方代码粘贴进去即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>现在开始介绍Tensorflow的安装</p><ul><li><p>CPU版的安装</p><blockquote><p>如果你想安装的是Tensorflow1.x的版本，请使用<code>pip install tensorflow</code></p><p>如果是Tensorflow 2.x的版本，请使用`pip install tensorflow==2.0.0-alpha0</p></blockquote></li></ul><p>Tensorflow GPU安装时的准备工作：</p><p>在安装以下两个文件之前，先去<a href="https://tensorflow.google.cn/install/gpu" target="_blank" rel="noopener">Tensorflow官网</a>查看GPU安装时对CUDA和cudnn的版本要求，特别要注意标红部分。</p><p><img src="/userImages/GPU_cuda_install.png" alt></p><ul><li><p>CUDA的下载与安装</p><p>下载网址:<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a></p><p><img src="/userImages/cuda_download_1.png" alt></p><p>如果当前的CUDA Toolkit版本比较高，需要选择低版本的CUDA Toolkit，请点击<em>Legacy Releases</em>之后选择Tensorflow官网要求的版本。</p><p><img src="/userImages/cuda_download_2.png" alt></p><p><img src="/userImages/cuda_download_3.png" alt></p><p>最后等待下载完毕。</p><p><img src="/userImages/cuda_install_1.png" alt></p><p><img src="/userImages/cuda_install_2.png" alt></p><p>要特别主要自定义中的内容。</p><ul><li><p>CUDA中的内容选择</p><p>如果你不使用<code>Visual Studio</code>请把前面个方框中的<code>√</code>去掉。</p></li><li><p>NVIDIA GeForce Experience</p><p>可选可不选</p></li><li><p>Driver components</p><p>如果你<code>当前版本</code>高于或等于上面的<code>新版本</code>,那么此选项不选，如果你<code>当前版本</code>低于<code>新版本</code>，请选择。</p></li><li><p>Other components</p><p>可选可不选</p></li></ul><p><img src="/userImages/cuda_install_3.png" alt></p><p><img src="/userImages/cuda_install_4.png" alt></p><p><img src="/userImages/cuda_install_5.png" alt></p><p>最后直接点击<code>下一步</code>即可。</p></li><li><p>cudnn的下载与安装</p><p>cudnn的下载是需要登录的。</p><p>下载网址:<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a></p><p><img src="/userImages/cudnn_download_1.png" alt></p><p>在下载cudnn的时候，要特别注意cudnn对应的cuda版本号，cuda的版本要使用Tensorflow官网要求的版本号，否者会无法使用GPU版的。注意标红的第二部分。</p><p><img src="/userImages/cudnn_download_2.png" alt></p><p>然后点击<code>Windows 10</code>即可下载。</p><p>在将cudnn下载完毕后，cudnn不是安装程序，将其解压即可，然后将文件夹名改为<code>cudnn</code>，最后将该文件夹移动到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0</code>中即可。</p></li><li><p>环境变量的配置</p><p>将以下两个路径添加进系统的环境变量中，最后将刚才添加的环境变量移动到最上面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0\extras\CUPTI\libx64</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0\cudnn\bin</span><br></pre></td></tr></table></figure><p><img src="/userImages/cuda_and_cudnn.png" alt></p></li><li><p>验证是否可用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure><p><img src="/userImages/cuda_and_cudnn_1.png" alt></p><p>通过以上程序，如果没有出错，则说明安装成功，如果出错，请仔细阅读以上内容。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tensorflow介绍&quot;&gt;&lt;a href=&quot;#Tensorflow介绍&quot; class=&quot;headerlink&quot; title=&quot;Tensorflow介绍&quot;&gt;&lt;/a&gt;Tensorflow介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TensorFlow™是一个采用数
      
    
    </summary>
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/categories/Tensorflow/"/>
    
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/tags/Tensorflow/"/>
    
      <category term="GPU" scheme="http://quiryrain.tk/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow知识总结</title>
    <link href="http://quiryrain.tk/190416-1/"/>
    <id>http://quiryrain.tk/190416-1/</id>
    <published>2019-04-16T02:30:52.000Z</published>
    <updated>2019-05-02T03:44:22.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消除过拟合的方法"><a href="#消除过拟合的方法" class="headerlink" title="消除过拟合的方法"></a>消除过拟合的方法</h3><ul><li>L1正则化   绝对值</li><li>L2正则化  平方</li><li>L3正则化  立方</li><li>L4正则化  4次方</li><li>dropout</li></ul><p>其中对图像的处理过程一般为:<br>输入 – &gt; 卷积 – &gt; 池化 –&gt; 卷积 –&gt; 池化 –&gt; 消除过拟合 –&gt;全连接层 – &gt; 全连接层 –&gt; 分类</p><p>max_pool函数的作用是降低系统的复杂度，其中pooling分为最大池化和平均值池化</p><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>线性回归的目标是找到一个与训练数据最为吻合的线性函数。对于2D数据是找到一个与数据相吻合的线性函数<br>线性回归是一种找到最适合一组点的直线或超平面的方法</p><p>在卷积运算中，对图像降维是通过修改卷积核的strides（步长）参数进行降维的。</p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>单层CNN的实际用途是检测边缘。对于图像识别和分类任务而言，更常见的情形是使用不同的层类型支持某个卷积层。这些层有助于减少过拟合，并可加速训练过程和降低内存占用率。</p><p>tf.nn.depthwise_conv2d:将一个卷积层的输出连接到另一个卷积层的输入<br>tf.nn.separabel_conv2d:对于较大的模型，可保证在不牺牲准确率的前提下实现训练的加速。对于较小的模型，它能够快速收敛，但准确率较低。<br>tf.nn.conv2d_transpose:将一个卷积核应用于一个新的特征图，后者的每一部分都填充了与卷积核相同的值。当该卷积核遍历新图像时，任何重叠的部分都相加在一起。</p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>为神经网络引入非线性</p><p>在CNN中最常用的激活函数：<br>tf.nn.relu:<br>Relu是分段线性的。当输入为非负数时，输出与输入相同。当输入为负数时，输出均为0.<br>优点：不受梯度消失的影响，取值范围为[0,++]<br>缺点：当使用较大的学习速率时，易受达到饱和的神经元的影响。</p><p>tf.sigmoid:<br>sigmoid函数的返回值位于区间[0.0, 1.0]中。当输入值较大时，tf.sigmoid将返回一个接近于1.0的值，而输入值较小时，返回值将接近于0.0</p><p>tf.tanh:<br>双曲正切函数(tanh)与tf.sigmoid非常接近，且后者具有类似的优缺点。tf.tanh函数的值域为[-1.0, 1.0]</p><p>tf.nn.dropout:<br>依据某个可配置的概率将输出设为0.0.为学习到的输出添加少量噪声。</p><p>梯度是偏导数的矢量<br>Pandas 是用于进行数据分析和建模的重要库</p><ul><li>张量(Tensor)：是对高维数据的一种抽象式表达<br> Tensorflow张量是什么？</li><li>张量时用来表示多维数据的</li><li>张量时执行操作时的输入或输出数据</li><li>用户通过执行操作来创建或计算张量</li><li>张量的形状不一定在编译时确定，可以在运行时通过形状推断计算得出。</li></ul><p>会话是什么?<br>会话提供了估算张量和执行操作的运行环境，它是发放计算任务的客户端，所有计算任务都由它连接的执行引擎完成。</p><p>会话执行:</p><ul><li>估算张量(Tensor.eval)</li><li>执行操作(Operation.run)</li><li>会话执行(Session.run)</li></ul><p>会话执行原理：<br>调用sess.run(tain_op)语句执行训练操作时：</p><ul><li>首先，程序内部提取操作依赖的所有前置操作。这些操作的节点共同组成了一副子图</li><li>然后，程序将子图中的计算节点、存储节点和数据节点按照各自的执行设备分类。相同设备上的节点组成了一副局部图</li><li>最后，每个设备上的局部图在实际执行时，根据节点间的依赖关系将各个节点有序的加载到设备上执行。</li></ul><p>优化算法：<br>典型的机器学习和深度学习问题通常都需要转换为最优化问题进行求解。</p><p>求解最优化的问题的算法成为优化算法，他们通常采用迭代方式实现：首先设定一个初始的可行解。然后基于特定的函数反复重新计算可行解，直到找到一个最优解或达到预设的收敛条件。</p><p>不同的优化算法采用的迭代策略各有不同：</p><ul><li>有的使用目标函数的一阶导数，如梯度下降法</li><li>二阶导数，如牛顿法</li><li>前几轮迭代的信息，如Adam</li></ul><p>优化器是实现优化算法的载体：<br>一次典型的迭代优化应该分为以下3个步骤：</p><ul><li>计算梯度： 调用compute_gradients方法</li><li>处理梯度： 用户按照自己需求处理梯度值，如梯度裁剪和梯度加权等</li><li>应用梯度： 调用apply_grandients方法，将处理后的梯度值应用到模型参数  </li></ul><p>Loss下降方法：</p><ul><li><p>随机梯度下降</p></li><li><p>最速下降法: tf.train.AdamOptimizer()</p></li></ul><p>监督学习典型算法:</p><ul><li>线性回归（Linear Regression）</li><li>逻辑回归（Logistic Regression）</li><li>决策树（Decision Tree）</li><li>随机森林（Random Forest）</li><li>最紧邻算法（k-NN）</li><li>朴素贝叶斯（Naice Bayes）</li><li>支持向量机（SVM）</li><li>感知器（Perceptron）</li><li>深度神经网络（DNN）</li></ul><p>Tensorflow训练模型的工作流</p><blockquote><p>数据读入–&gt; 数据分析 –&gt; 数据规范化 –&gt; 创建模型 –&gt; 创建会话 –&gt; 训练模型</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消除过拟合的方法&quot;&gt;&lt;a href=&quot;#消除过拟合的方法&quot; class=&quot;headerlink&quot; title=&quot;消除过拟合的方法&quot;&gt;&lt;/a&gt;消除过拟合的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;L1正则化   绝对值&lt;/li&gt;
&lt;li&gt;L2正则化  平方&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/categories/Tensorflow/"/>
    
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/tags/Tensorflow/"/>
    
      <category term="学习总结" scheme="http://quiryrain.tk/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow的基础学习和资料</title>
    <link href="http://quiryrain.tk/190416/"/>
    <id>http://quiryrain.tk/190416/</id>
    <published>2019-04-16T00:44:34.000Z</published>
    <updated>2019-04-18T02:06:50.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="以下内容为测试内容"><a href="#以下内容为测试内容" class="headerlink" title="以下内容为测试内容"></a>以下内容为测试内容</h3><blockquote><p>以下内容未测试内容</p></blockquote><p>中文测试</p><p>再次测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;h3 id=&quot;以下内容为测试内容&quot;&gt;&lt;a href=&quot;#以下内容为测试内容&quot; class=&quot;headerlink&quot; title=&quot;以下内容为测试
      
    
    </summary>
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/categories/Tensorflow/"/>
    
    
      <category term="Tensorflow" scheme="http://quiryrain.tk/tags/Tensorflow/"/>
    
      <category term="机器学习" scheme="http://quiryrain.tk/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="资料" scheme="http://quiryrain.tk/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>有些人走着走着就散了</title>
    <link href="http://quiryrain.tk/181118/"/>
    <id>http://quiryrain.tk/181118/</id>
    <published>2019-03-01T01:41:48.000Z</published>
    <updated>2019-03-05T13:32:48.675Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      早知道是这样 像梦一场 我才不会把爱都放在同一个地方
    
    </summary>
    
      <category term="往事回廊" scheme="http://quiryrain.tk/categories/%E5%BE%80%E4%BA%8B%E5%9B%9E%E5%BB%8A/"/>
    
    
      <category term="一场梦" scheme="http://quiryrain.tk/tags/%E4%B8%80%E5%9C%BA%E6%A2%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用tkinter进行图片的遍历显示</title>
    <link href="http://quiryrain.tk/190228/"/>
    <id>http://quiryrain.tk/190228/</id>
    <published>2019-02-28T10:06:46.000Z</published>
    <updated>2019-03-05T13:32:48.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>最近因为要写个GUI的内容，需要用到图像的遍历显示，因为没有办法,所以就自行摸索着开始写一个循环显示的TK。最终算是不符所望吧，勉强写出来一个，以此做下记录，便于下次使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageTk, Image</span><br><span class="line"><span class="keyword">import</span> glob, time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">filenames = glob.glob(<span class="string">'sysImages/*'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoQuit</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    root.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    root = tk.Tk()</span><br><span class="line"></span><br><span class="line">    img = Image.open(filename)</span><br><span class="line">    photo = ImageTk.PhotoImage(img)</span><br><span class="line">    label = tk.Label(image=photo)</span><br><span class="line">    label.image = photo</span><br><span class="line">    label.pack()</span><br><span class="line"></span><br><span class="line">    t = threading.Thread(target=autoQuit)</span><br><span class="line">    t.start()</span><br><span class="line">    root.mainloop()</span><br><span class="line">    root.destroy()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;最近因为要写个GUI的内容，需要用到图像的遍历显示，因为没有办法,所以就自行摸索着开始写一个循环显示的TK。最终算是不符所望吧，勉强写出来一
      
    
    </summary>
    
      <category term="Python杂记" scheme="http://quiryrain.tk/categories/Python%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="tkinter" scheme="http://quiryrain.tk/tags/tkinter/"/>
    
      <category term="遍历图片" scheme="http://quiryrain.tk/tags/%E9%81%8D%E5%8E%86%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>使用Python实现贪心算法</title>
    <link href="http://quiryrain.tk/180113/"/>
    <id>http://quiryrain.tk/180113/</id>
    <published>2019-02-26T03:14:50.000Z</published>
    <updated>2019-03-05T13:32:48.673Z</updated>
    
    <content type="html"><![CDATA[<p>题目： 圣诞节来临了，在城市A中，圣诞老人准备分发糖果。现在有多箱不同的糖果，每一种糖果都有自己的价值和重量。每箱糖果都可以拆分成任意散装组合带走。圣诞老人的驯鹿最多只能承受一定重量的糖果。请问圣诞老人最多能带走多大价值的糖果。</p><p>输入数据： 输入的第一行由两个部分组成，分别为糖果箱数正整数n(1&lt;=n&lt;=100)，驯鹿能承受的最大重量正整数w(0&lt;w&lt;10000)；其余n行每行对应一箱糖果，由两部分正整数v和w组成，分别为一箱糖果的价值和重量。</p><p>输出要求： 输出圣诞老人能带走的糖果的最大总价值，保留一位小数，输出为一行。</p><p>输出样例： </p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">4</td><td style="text-align:left">15</td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">412</td><td style="text-align:left">8</td></tr><tr><td style="text-align:left">266</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">591</td><td style="text-align:left">2</td></tr></tbody></table><p>输出样例:</p><p>　1193.0</p><p>注：此处并没有按照这样的格式进行输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line">input_a = raw_input(<span class="string">u'箱数:'</span>)</span><br><span class="line">input_b = raw_input(<span class="string">u'最大承受重量:'</span>)</span><br><span class="line"></span><br><span class="line">list_c = []</span><br><span class="line">list_z = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,int(input_a)+<span class="number">1</span>):</span><br><span class="line">    input_c = raw_input(<span class="string">'第'</span>+str(i)+<span class="string">'箱的总价值:'</span>)</span><br><span class="line">    input_d = raw_input(<span class="string">'第'</span>+str(i)+<span class="string">'箱的重量:'</span>)</span><br><span class="line">    avg = round(int(input_c)/int(input_d),<span class="number">1</span>)<span class="comment">#每一箱，重量为1的价值</span></span><br><span class="line">    list_c.append(avg)<span class="comment">#添加到列表，用于之后做比较</span></span><br><span class="line">    list_z.append([int(input_d),avg,<span class="number">0</span>])<span class="comment">#此处列表中添加列表，中间的列表一个存放总重量，第二个存放单位价值，第三个存放是否该物品已被取走</span></span><br><span class="line"></span><br><span class="line">list_c.sort(reverse=<span class="literal">True</span>) <span class="comment"># 降序排序</span></span><br><span class="line">sum =[<span class="number">0</span>,<span class="number">0</span>]<span class="comment"># 用于存放取走的总重量，第一个参数是取走的重量，第二个是超出前的备份</span></span><br><span class="line">num =<span class="number">0</span></span><br><span class="line">ji = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_c)):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(list_z)):</span><br><span class="line">        <span class="keyword">if</span> ji == <span class="number">0</span>:<span class="comment">#做是否超出马车最大承受量的标记，未超出为0</span></span><br><span class="line">            <span class="keyword">if</span> (list_c[i] == list_z[k][<span class="number">1</span>]) <span class="keyword">and</span> (list_z[k][<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">                sum[<span class="number">1</span>] = sum[<span class="number">0</span>]<span class="comment">#备份</span></span><br><span class="line">                sum[<span class="number">0</span>] = sum[<span class="number">0</span>] + list_z[k][<span class="number">0</span>]<span class="comment">#取走的重量</span></span><br><span class="line">                v = list_z[k][<span class="number">0</span>]<span class="comment">#取走的重量</span></span><br><span class="line">                <span class="keyword">if</span> sum[<span class="number">0</span>] &gt; int(input_b):<span class="comment">#如果所有取走的重量超出马车的重量，就依次减少一单元的重量</span></span><br><span class="line">                    ji = <span class="number">1</span><span class="comment">#超出为1</span></span><br><span class="line">                    t= list_z[k][<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#依次减去单位1的重量</span></span><br><span class="line">                        z = sum[<span class="number">1</span>] + t<span class="comment">#使用备份进行判断，此时取走的数量已经大于最大承受量了</span></span><br><span class="line">                        <span class="keyword">if</span> z &lt;= int(input_b):</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        t = t<span class="number">-1</span></span><br><span class="line">                    v=t<span class="comment">#等于最大承受量时，价值较大的一件物品应取走的数量</span></span><br><span class="line">                    sum[<span class="number">0</span>]=sum[<span class="number">1</span>]<span class="comment">#从备份恢复</span></span><br><span class="line">                    sum[<span class="number">0</span>] = sum[<span class="number">0</span>] + t<span class="comment">#此时为真正的取走数量</span></span><br><span class="line">                num = list_c[i]*v + num<span class="comment">#总价值</span></span><br><span class="line">                list_z[k][<span class="number">2</span>] = <span class="number">1</span><span class="comment">#取走的标记</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">u'能带走的糖果的最大价值为:'</span>,num</span><br></pre></td></tr></table></figure><p>实现的效果图(此处用两组数据进行测试)：<br>第一组数据：<br><img src="/userImages/tanxin1.png" alt="测试结果1"></p><p>第二组数据：<br><img src="/userImages/tanxin2.png" alt="测试结果2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目： 圣诞节来临了，在城市A中，圣诞老人准备分发糖果。现在有多箱不同的糖果，每一种糖果都有自己的价值和重量。每箱糖果都可以拆分成任意散装组合带走。圣诞老人的驯鹿最多只能承受一定重量的糖果。请问圣诞老人最多能带走多大价值的糖果。&lt;/p&gt;
&lt;p&gt;输入数据： 输入的第一行由两个
      
    
    </summary>
    
      <category term="Python杂记" scheme="http://quiryrain.tk/categories/Python%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="贪心算法" scheme="http://quiryrain.tk/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Python实现的杨辉三角</title>
    <link href="http://quiryrain.tk/171222/"/>
    <id>http://quiryrain.tk/171222/</id>
    <published>2019-02-26T03:10:30.000Z</published>
    <updated>2019-03-05T13:32:48.672Z</updated>
    
    <content type="html"><![CDATA[<p>某日，闲来无事做，就尝试着用Python实现了下杨辉三角，以下使用Python2 实现的杨辉三角 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">' '</span>*(<span class="number">20</span>*<span class="number">3</span>)+str(<span class="number">1</span>)             <span class="comment">#定义起始两行</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">' '</span>*(<span class="number">19</span>*<span class="number">3</span>)+str(<span class="number">1</span>)+<span class="string">' '</span>*<span class="number">5</span>+str(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">if</span> i ==<span class="number">3</span>:</span><br><span class="line">            L = [<span class="number">1</span>,<span class="number">1</span>]       <span class="comment">#初始化第二行        </span></span><br><span class="line">        L1 = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,i):</span><br><span class="line">            z = L[i-j<span class="number">-1</span>]+L[i-j] <span class="comment"># 通过上一行构建下一层数据</span></span><br><span class="line">            L1.append(z)        <span class="comment"># 将数据添加到一个空列表中</span></span><br><span class="line">        L = [<span class="number">1</span>]       <span class="comment"># 再次对L初始化</span></span><br><span class="line">        L.extend(L1)    <span class="comment"># 将两个列表合并</span></span><br><span class="line">        L.append(<span class="number">1</span>)     <span class="comment"># 在L列表中添加最后一个数据“1”</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 以下内容为杨辉三角的打印</span></span><br><span class="line">        t = <span class="string">' '</span>*((<span class="number">21</span>-i)*<span class="number">3</span>)+str(<span class="number">1</span>)   <span class="comment"># 每次循环进行初始化每列的第一个数据1</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>,len(L)):   <span class="comment"># 以下为构建每列的除一个数据外的其他数据，</span></span><br><span class="line">            <span class="keyword">if</span> L[h]&lt;<span class="number">10</span>:             <span class="comment"># 如果数据小于10，就是其前面5个空格，如果</span></span><br><span class="line">                t = t + <span class="string">' '</span>*<span class="number">5</span>+str(L[h]) <span class="comment">#数据小于100，就减少一个空格，依次类推，</span></span><br><span class="line">            <span class="keyword">elif</span> L[h] &lt;<span class="number">100</span>:         <span class="comment"># 直至剩余一个空格，用于分辨相邻的数据</span></span><br><span class="line">                t = t+<span class="string">' '</span>*<span class="number">4</span>+str(L[h])</span><br><span class="line">            <span class="keyword">elif</span> L[h] &lt; <span class="number">1000</span>:</span><br><span class="line">                t = t + <span class="string">' '</span>*<span class="number">3</span>+str(L[h])</span><br><span class="line">            <span class="keyword">elif</span> L[h] &lt; <span class="number">10000</span>:</span><br><span class="line">                t = t + <span class="string">' '</span>*<span class="number">2</span>+str(L[h])</span><br><span class="line">            <span class="keyword">elif</span> L[h] &lt; <span class="number">100000</span>:</span><br><span class="line">                t = t + <span class="string">' '</span>*<span class="number">1</span>+str(L[h])</span><br><span class="line">        <span class="keyword">print</span> t</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    triangel()</span><br></pre></td></tr></table></figure><p><img src="/userImages/yanghuisanjiao.png" alt="杨辉三角"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某日，闲来无事做，就尝试着用Python实现了下杨辉三角，以下使用Python2 实现的杨辉三角 &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="Python杂记" scheme="http://quiryrain.tk/categories/Python%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杨辉三角" scheme="http://quiryrain.tk/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>使用chromedriver实现豆瓣网页的全网页截图</title>
    <link href="http://quiryrain.tk/190108/"/>
    <id>http://quiryrain.tk/190108/</id>
    <published>2019-02-26T02:48:23.000Z</published>
    <updated>2019-03-05T13:32:48.676Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于工作需要，需要对部分网站进行全文截屏。在网上搜了很久没有搜出好的方法，而且在新版的selenium中已经不在支持PhantomJS了，所以全文截取变得有点棘手。</p><p>此处给出一个简单的方法，以20行代码实现<code>selenium+chromedriver+python</code>实现豆瓣的全文截取。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--dns-prefetch-disable'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--no-referrers'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--disable-audio'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--ignore-certificate-errors'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--allow-insecure-localhost'</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">'http://www.douban.com'</span>)</span><br><span class="line">width = driver.execute_script(</span><br><span class="line">        <span class="string">"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);"</span>)</span><br><span class="line">height = driver.execute_script(</span><br><span class="line">        <span class="string">"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);"</span>)</span><br><span class="line">driver.set_window_size(width + <span class="number">100</span>, height + <span class="number">100</span>)</span><br><span class="line">driver.save_screenshot(<span class="string">'douban.png'</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p><img src="/userImages/doubanjieping.png" alt="豆瓣全屏截取"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近由于工作需要，需要对部分网站进行全文截屏。在网上搜了很久没有搜出好的方法，而且在新版的selenium中已经不在支持PhantomJS了，所以全文截取变得有点棘手。&lt;/p&gt;
&lt;p&gt;此处给出一个简单的方法，以20行代码实现&lt;code&gt;selenium+chromedriv
      
    
    </summary>
    
      <category term="Python后端" scheme="http://quiryrain.tk/categories/Python%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Chromedriver" scheme="http://quiryrain.tk/tags/Chromedriver/"/>
    
      <category term="全页面截屏" scheme="http://quiryrain.tk/tags/%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>MongoEngine所使用的操作符</title>
    <link href="http://quiryrain.tk/171220/"/>
    <id>http://quiryrain.tk/171220/</id>
    <published>2019-02-26T02:41:13.000Z</published>
    <updated>2019-03-05T13:32:48.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是MongoEngine？"><a href="#什么是MongoEngine？" class="headerlink" title="什么是MongoEngine？"></a>什么是MongoEngine？</h3><blockquote><p>MongoEngine是基于Python的对象系统设计的MongoDB专用的ORM框架。与SQLAlchemy不同的是，MongoEngine会自动生成一个唯一的标识，用ID属性表示。当然MongoEngine与SQLAlchemy还有很对不同的地方，比如字段类型等。</p></blockquote><h3 id="MongoEngine所支持的部分操作符"><a href="#MongoEngine所支持的部分操作符" class="headerlink" title="MongoEngine所支持的部分操作符"></a>MongoEngine所支持的部分操作符</h3><blockquote><p>操作符的表示形式为:加在关键字后面使用”<strong>+操作符”(此处是两个” _ “),例如：publish_data</strong>gt </p></blockquote><ul><li>ne：不等于</li><li>lt：小于</li><li>lte：小于或等于</li><li>gt：大于</li><li>gte：大于或等于</li><li>not：对一个操作符取否，例如publish_data__not__gt</li><li>in：值在列表中</li><li>nin：值不在列表中</li><li>mod：值%a==b,a和b用(a,b)的方式传递</li><li>all：列表中的所有值都在该字段中</li><li>size：列表的大小</li><li>existes：在该字段中存在这个值</li></ul><h3 id="检测字符串的部分操作符"><a href="#检测字符串的部分操作符" class="headerlink" title="检测字符串的部分操作符"></a>检测字符串的部分操作符</h3><ul><li>exact：字符串相等</li><li>iexact：字符串相等（大小写不敏感）</li><li>contains：字符串包含该值</li><li>icontains：字符串包含该值（大小写不敏感）</li><li>startswith：字符串以该值开始</li><li>istartswith：字符串以该值开始（大小写不敏感）</li><li>endswith：字符串以该值结束</li><li>iendswith：字符串以该值结束（大小写不敏感）</li></ul><h3 id="可以对字段值进行修改的操作符"><a href="#可以对字段值进行修改的操作符" class="headerlink" title="可以对字段值进行修改的操作符"></a>可以对字段值进行修改的操作符</h3><ul><li>set：设置一个值</li><li>unset：删除一个值</li><li>inc：将值自增</li><li>dec：将值自减</li><li>push：把一个值加到列表的末尾</li><li>push_all：把几个值加到列表的末尾</li><li>pop：移除列表中的第一个或者是最后一个值</li><li>pull：移除列表中的值</li><li>pull_all：移除列表中的几个值</li><li>add_to_set：当且晋档某值不在列表中时，将其添加进列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是MongoEngine？&quot;&gt;&lt;a href=&quot;#什么是MongoEngine？&quot; class=&quot;headerlink&quot; title=&quot;什么是MongoEngine？&quot;&gt;&lt;/a&gt;什么是MongoEngine？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Mongo
      
    
    </summary>
    
      <category term="Python后端" scheme="http://quiryrain.tk/categories/Python%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Mongo" scheme="http://quiryrain.tk/tags/Mongo/"/>
    
      <category term="操作符" scheme="http://quiryrain.tk/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>一场说走就走的旅行</title>
    <link href="http://quiryrain.tk/180428/"/>
    <id>http://quiryrain.tk/180428/</id>
    <published>2019-02-26T02:28:35.000Z</published>
    <updated>2019-03-05T13:32:48.674Z</updated>
    
    <content type="html"><![CDATA[<p>时光荏苒，岁月如梭，大学里总需要一场说走就走的旅行。或为了心中的她，也或为了自己。</p><blockquote><p>那是一个早晨，我错过了末班车，却没有错过你</p></blockquote><p>人们总说“时间是个好东西，它能让你放下原来放不下的、看淡你原来看不淡的”。或许这就是一种成长吧，建立在原来的痛苦、喜悦之上的成长。<br>在那个时候我很庆幸没有错过你，虽然现在错过了，也没有什么后悔的，因为总需要一场说走就走的旅行。这场旅行无关你我，而是我必须要走的路，或许是我和他人，但我没有想到会是和你。因为这是一场说走就走永不相见的旅行。有些人走着走着就散了说的就是这个道理吧！  </p><blockquote><p>那年我们都很年轻，我们只是两条相交线，很幸运的在某一点相遇了，只是没有想到这个交叉点的停留时间是六年</p></blockquote><p>这场旅行是我一个人走的，因为没有你。路上有很多的美景，但是总觉得少点什么，即使看着这美景，也无心观赏，虽人在观景，但心思却飞向了那个两个月之前。之所以不是现在，是因为现在你让我找不到原谅的理由，也不可能会再相遇。因为我不想再步入那座让我伤心的城市，让我伤心欲绝的城市。<br>这场旅行是我一个人走的，因为花开了。坐在火车窗前观望着窗外的景色，发现窗外遍野的油菜花开了，开的很美、很鲜艳，让人赏心悦目的那种美。不过可惜的是火车并没有因此而停足，而是萧萧而过，窗前的我却开始回忆那种遍野油菜花的美。<br>这场旅行是我一个人走的，因为我不得不一个人走。这场说走就走的旅行是场艰辛的旅行，但是这场旅行也使我有了新的理解，并不是所有都是我想怎么就怎么的，现实不会因为我而改变，但是我却会因为这个现实而改变。或许这就是我场旅行的意义吧。  </p><blockquote><p>月台中总有太多的不舍，但终究还是不得不放开</p></blockquote><p>这场旅行中我见了很多新的事物。在原来没有时间去开始这场说走就走的旅行之前，我的世界是狭小的，之后我的世界是广阔的。一场忐忑的旅行，只是没有太多的如果，只有唯一的结果。<br>在这场旅行中虽然是艰辛的，收获也算是有的，但是也有疲惫，疲惫的是在这场旅行开始之前的忐忑，收获的是我彻底可以好好看看这个世界了。或许当我再次看到那片油菜田时，能够认真欣赏，好好珍惜这短瞬即逝的美。<br>纸短情长又如何，回忆终究只是回忆，生活还是要继续的。  </p><blockquote><p>旅行结束后，我有了很多的时间去看这个世界了。</p></blockquote><p>也许会在某个美丽的地方再次相遇，也许会永不相遇。太多的放不下终究还是放下了。繁华的世界，流逝的美，这场旅行归来后，我变回了原来的自己，只是多了旅行路途中的辛苦和收获。  </p><blockquote><p>后记</p></blockquote><p> “好久不见！”<br> “好久不见！”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时光荏苒，岁月如梭，大学里总需要一场说走就走的旅行。或为了心中的她，也或为了自己。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那是一个早晨，我错过了末班车，却没有错过你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们总说“时间是个好东西，它能让你放下原来放不下的、看淡你原来看
      
    
    </summary>
    
      <category term="往事回廊" scheme="http://quiryrain.tk/categories/%E5%BE%80%E4%BA%8B%E5%9B%9E%E5%BB%8A/"/>
    
    
      <category term="心灵洗涤" scheme="http://quiryrain.tk/tags/%E5%BF%83%E7%81%B5%E6%B4%97%E6%B6%A4/"/>
    
  </entry>
  
  <entry>
    <title>岁月静好</title>
    <link href="http://quiryrain.tk/180625/"/>
    <id>http://quiryrain.tk/180625/</id>
    <published>2019-02-25T09:08:01.000Z</published>
    <updated>2019-03-05T13:32:48.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><blockquote><p>故事的开始都很美好</p></blockquote><p>2015年9月2号，我来到了这所大学，虽然这所大学并不是很好的大学，但是这所大学却给了我很多记忆。<br>初入大学，总有太多的新鲜感，逛逛走走，时间总会匆匆而过。记得正式上课的第一天跑错了教室，不是我一人，而是我们整个班，现在想起来都很搞笑。<br>在那一年里，我有着自己的梦想，我期盼着自己的未来，因为我相信自己会过的更好。  </p><h3 id="悄悄"><a href="#悄悄" class="headerlink" title="悄悄"></a>悄悄</h3><blockquote><p>窗外的景色依旧燥热，有你时如此，无你时也是如此。</p></blockquote><p>我们有些时候总是悄悄的来，然后再悄悄的走开。人生中有很多的聚散，最后不过是风轻云淡。曾经我很爱很爱一个女孩，异地很痛苦，时刻想着她，后来也放下了。有时候人生啊，真的是悄悄的来，悄悄的走。大学四年里，我爱过就好，现在我已经习惯了一个人生活，回忆里和朋友坐在喧闹街市的路边摊，几瓶啤酒，一点小菜。聊起彼此曾经失败的感情，都在岁月变迁里逐渐释怀。胸膛上固守的温度总是会被南来北往的季风吹散，那些念念不忘的名字最后也被后来者取代。记住当时的日色，也未必能与你岁岁相守，彼此停留。  </p><h3 id="那一年"><a href="#那一年" class="headerlink" title="那一年"></a>那一年</h3><blockquote><p>记忆它总是慢慢的累积在我心中无法抹去</p></blockquote><p>那一年，我认识了你，一句半开玩笑的话，我们在一起了。时至今日，我依然记得当初说的那句玩笑话“要不你做我女朋友吧”，没错，就是这句，然后我们就在一起了，我开心的像个八百斤的胖子一样。之后的我做什么事都会为你想着，爱着你，宠着你，陪着你。只是后来 。。。 只是后来我们走散了。高中的生活中，你是我最美好的回忆，朋友羡慕着你我的感情，而我也认为我们会走到一起。那一年，《漂洋过海来看你》还很火，你对我说“我多想去见你”，因为那年我转到了另一所学校，在那所学校中我过着没有你的生活，殊不知我也很想见你，不善言表的我，不会更好的用语言来表达我对你的爱，而我却选择了为你默默付出。  </p><h3 id="也许，也许"><a href="#也许，也许" class="headerlink" title="也许，也许"></a>也许，也许</h3><blockquote><p>如果当初没有如果，现在的结局会不会不一样</p></blockquote><p>高考过后，我们去了两所不一样的学校，准确来说是我去了一所离你800多公里外的一所本科学校，而你却选择去了一所专科学校。也许这就注定了之后的结局吧。价值观不同，有时候很难走到一起。那时我们并没分开，而我也只在放假的时候才有空去找你，陪着你。繁忙的学业，时刻都会落后的技术，让我选择了我要给你更好的生活，而你选择的是要我时刻陪伴。大学上课时，手机成为了我们两个唯一交流的桥梁。整日看着手机，每当手机亮了我就知道是你给我发消息。时光蹉跎，岁月静好，三年里我们就是这样过去了，手机、放假后的陪伴。渐渐的我们都变了，17年，你去了你们那里做了一名幼教，你实习之前你问我“以后你养得起我吗”，我沉默了，是啊，我当时的能力能养你吗，我也问我自己，技术那么渣，我怎么去养你。我想了许久，我说“我养你”，后来我变了，变得想要为你我的生活做拼搏。我用实际行动做证明，但是我们却渐渐走散了，我想要给你我所拥有的最好的。接触的不同，价值观也就渐渐的改变了。  </p><h3 id="后来的我们"><a href="#后来的我们" class="headerlink" title="后来的我们"></a>后来的我们</h3><blockquote><p>美好的爱情大都相似，而不幸的爱情最后都成了故事，如果当时你没走，后来的我们会不会不一样? ——《后来的我们》</p></blockquote><p>后来，我们走散了。分手后的某一天，我突然知道你订了婚，要和别人去结婚了，我突然间觉得有我的世界都坍塌了。虽然我们分手了，我只是我没有想到你会选择那么早结婚。当我知道后的两天中，我彻夜未眠，听了两晚的《体面》。那天是过年后，朋友来找我喝酒，我大醉，醉的不省人事。虽然是醉的不省人事，但是我却记得关于你的话，我说“我想XXX”。那场感情上的坍塌，让我颓废了一星期，一星期之后，我选择了放下，彻彻底底的放下，手机和电脑里都删了关于你的一切。  </p><h3 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h3><blockquote><p>再见，曾经最爱的她。</p></blockquote><p>如今的我初入社会，离开了有太多记忆的学校。我为了自己的生活做着拼搏，不再是为了我们。<br><img src="/userImages/515.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;故事的开始都很美好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2015年9月2号，我来到了这所大学，虽然这所大学并
      
    
    </summary>
    
      <category term="往事回廊" scheme="http://quiryrain.tk/categories/%E5%BE%80%E4%BA%8B%E5%9B%9E%E5%BB%8A/"/>
    
    
      <category term="Miss" scheme="http://quiryrain.tk/tags/Miss/"/>
    
  </entry>
  
  <entry>
    <title>玩命追一姑娘</title>
    <link href="http://quiryrain.tk/180623/"/>
    <id>http://quiryrain.tk/180623/</id>
    <published>2019-02-25T09:00:50.000Z</published>
    <updated>2019-03-05T13:32:48.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="玩命的追一姑娘"><a href="#玩命的追一姑娘" class="headerlink" title="玩命的追一姑娘"></a>玩命的追一姑娘</h3><p>和朋友们聚会，大家决定玩一个游戏。<br>找一个主题，然后讲一段自己的真实经历，看看谁的经历最有起承转合，最催泪，最奇葩，或者最让人无语凝噎，想抄家伙。<br>最后我们选定了一个主题——你有没有玩命爱一个姑娘。<br>这个问题抛出来的时候，大家都沉默了，纷纷在记忆中寻找那一段为了姑娘、为了爱情玩命的激情岁月。<br>在座的男士们，有的已经结婚，有的有了女朋友，有的还是一如既往的单身狗。<br>在大家都沉默的片刻，四张点了根烟，说：“我的故事都到了嗓子眼了，我先说吧。”<br>我笑而不语，等着四张的下文。  </p><p>四张并没有四十岁。<br>我们二十来岁认识的时候，大家就管他叫四张了。<br>当时，我们都在山东上大学。<br>四张有个青梅竹马的女朋友叫何玉。<br>据四张说，自己和何玉从小穿开裆裤长大，一块啃过锅里的大腿骨，一块光着屁股洗过澡，更神奇的是，两个人生日只差两天，性格互补，血型一致，简直就是上天早就设定好的一对。<br>四张说，在我还不知道男孩和女孩在一起可以生小孩的时候，我就想跟何玉生小孩了。<br>两个人从小在一起过过家家，玩过给对方检查身体的游戏，不论见到谁的父母都可以直接叫爸妈。<br>四张跟何玉从小学到高中一直在一起，两个人一起经历了第二性征发育，长出喉结，胸脯耸起来，梦遗，初潮，青春期的各种烦躁，在别人都早恋的时候，两个人还是单纯得像是初生婴儿。<br>高中时代，何玉出过一次意外，失血过多。<br>四张不由分说地给何玉输了血。<br>四张说，看着我的血通过血管流进何玉的身体里，我就感觉我和何玉血脉相通了。就好像，就好像我把我的基因输送到何玉身体里一样。跟做爱的感觉一模一样，有战栗，有晕眩，还有高潮。真的，不骗人。  </p><p>最终，两个人去了山东两所相邻的大学，隔着一百八十公里。<br>上大学是两个人这么多年来第一次分开，四张说，我就好像经历了一次连体婴儿分离手术，而何玉就是我的幻肢，我总觉得一转头就能看见她，可是真转过头，又发现她不在了。  </p><p>真正的变故发生在一年后的情人节前夜。<br>四张接到了何玉的一通电话，电话里，何玉不无娇羞地说，四张，四张，有个男孩子跟我表白哎，你说我该不该答应他啊？<br>四张傻了，在四张听起来，这仿佛就是在问，老公老公，有个男孩子要跟我睡觉哎，你说我该不该答应他？<br>四张疯了，跳起来，念叨着，哎呀，我擦，我擦，我擦。<br>四张外套都没穿，直接冲出宿舍，抄起自己的自行车，蹬上车就往外狂奔。<br>夜色中的马路上，一个只穿着毛衣的缺货发狂地蹬着自行车，正在赶往一百八十公里之外的城市，问题是他要去干嘛呢？<br>四张说，当时我自己也不知道我也去干嘛，也许是去灭口。  </p><p>四张发狂地蹬了一整夜自行车，从毛衣到内裤都湿透了，整个人冒着热气，像是一个瓦特时代的蒸汽机。<br>到了情人节当天中午，四张终于赶到了何玉的宿舍，跳下自行车的时候，四张差点瘫在地上。<br>多年以后，四张回忆起来的时候，恨恨地说了一句英文：“I cannot feel my legs”  </p><p>何玉从女生宿舍楼下来的时候，四张正用一种诡异的外八字站着，穿着毛衣，瑟缩着，像是刚刚从戒备最森严的监狱里越狱而出。<br>何玉惊得差点背过气去，你怎么来了？你外套呢？<br>何玉不等四张说话，冲回去，不一会儿，拿着一件女式的粉色及膝羽绒服跑出来，不由分说地套在了四张身上。<br>四张继续用外八字的姿势站着，穿着粉色的女式及膝羽绒服，好不容易憋出一句话，你答应了？<br>何玉一愣，什么？<br>四张几乎都带了哭腔，你答应和追你的那个男人好了？<br>何玉哭笑不得，我……我还没有。<br>四张疯了，那你是准备答应了？<br>何玉沉默了一会儿，娇羞上脸，我不知道。哎，不过我问你，男生追求女生的时候，是不是脑子里都想着那个啊？<br>四张一下子这句话打得痛彻心扉。<br>时隔多年，四张回忆起那个时刻，还是痛得弯下了腰，恨不得立刻倒在地上舔马路。  </p><p>当天晚上，何玉带着四张到学校餐厅吃了饺子，把四张安排到男生宿舍睡一晚。<br>四张送何玉回女生宿舍的时候，那个追求何玉的男生抱着一束花等在了宿舍楼底下。<br>男生看到何玉身旁穿着粉色女式及膝羽绒服的四张，狐疑地往后退了两步。<br>何玉不好意思地对四张说，我过去跟他说两句。<br>四张说不出话，就看着何玉跑向那个男生，两个人叽里咕噜地不知道在说什么，四张恨自己为什么不好好学学唇语。<br>就在四张忍不住要冲过去的时候，何玉接过了男生递给她的那束花，对着男生娇羞地笑笑。<br>四张听见自己心碎的声音，不是咔嚓，也不是吧唧，也不是轰隆，而是何玉的笑声，呵呵。<br>四张男性的尊严终于复苏，他转身就跑，只留下何玉在他身后喊，你去哪啊？<br>夜色中的马路上，一个穿着女式及膝羽绒服的倒霉缺货，拼命地瞪着自行车奔驰在马路上。<br>四张形容说，那时候的心痛就像是，我的内脏全长在了外面，每走一步，都被粗糙的柏油马路摩擦。  </p><p>四张无法想象，自己青梅竹马了二十年的女孩，在情人节的夜晚，当着自己的面，答应了另一个不知道哪冒出来的男人的求爱。<br>四张觉得这个世界不会好了。<br>我们帮四张分析，也许是因为，熟悉的地方没有风景，熟悉的男人没有小鸡鸡吧。<br>四张哭着骂了一句，操你们大爷。  </p><p>大学里剩下的时光，四张没有谈恋爱，转而对各种社团活动产生了兴趣。先后参加过什么大学生电路装置比赛，大学生贫困山区十日行，大学生街头公益筹款之类。  </p><p>毕业之后，何玉拿到一份不错的offer，去了北京，成了北漂的一员。<br>四张就在山东一家运输公司跑货运，开着那种大卡车，一趟车要跑三四天，车上吃，车上睡，夏天就在驾驶室里挂个蚊帐，冬天就浑身贴着暖宝宝，车里放十几把暖瓶。碰上堵车的时候，也能堵个两三天，四张就和同样被困的司机斗地主，打保皇。<br>一次， 四张开着卡车跑长途送一车情趣玩具，路上，突然接到了何玉的电话。<br>何玉在电话里哭着说，四张，四张，我钱包丢了，身份证也没了，我租的房子下水道也堵了，现在正往外冒水，我找不到房东，我不知道该怎么办？<br>四张一听，嘴里念叨着，哎呀，我擦，我擦，我擦。<br>当即猛地掉转车头，临时改了路线，憋着一泡从山东就带着的尿，拉着一车情趣玩具就往北京狂奔，完全忘记了等着发货那批淘宝店店主。  </p><p>四张的大货车开不进小区，四张就把车停在小区外面的马路上，自己跳下车，憋着那泡尿，冲到了何玉租住的小区砸门。<br>何玉打开门，看着风尘仆仆的四张，呆住了。<br>四张从牙缝里提出一句话，先让我撒个尿。  </p><p>何玉听着四张水流湍急地打击着马桶，惊魂未定。<br>紧接着，又听见洗手间里，四张吭哧吭哧的声音。<br>半个小时后，四张走出来，洗手间里焕然一新，下水道也疏通了。<br>四张甩下一叠钱，还有一张银行卡，对何玉说，你先用着。<br>何玉刚要感谢，四张的手机急促的响起，货运公司老板在电话里狂吼，你他妈去哪了？<br>四张一下子急了，嘴里念叨着，哎呀，我擦，我擦，我擦。急忙冲出去，何玉在身后喊，你倒是吃了饭再走啊。<br>四张跑到小区外面，发现两个交警，面对着大货车，不知所措。<br>大货车的吨位，交警的拖车是拖不走的。<br>四张硬着头皮，跑过去，和交警套近乎，说，我老婆生孩子，您行行好。<br>四张认栽交了罚款，又开着货车，拉着一车情趣玩具，在高速公路上狂奔。  </p><p>四张任劳任怨，勤勤恳恳，攒了钱，自己买了一辆卡车，继续跑着长途，送过各种各样稀奇古怪的货物。<br>他最爱看的电影是《玩命快递》，四张说，这演的就他妈是我啊。我有一次大半夜的，就在一条黑压压的马路上，遇到拦路抢劫的。他们弄了一颗树横在马路中间，我一看不好，猛踩油门，飞驰而过。开除十公里之后，才发现两个轮胎都漏气了。  </p><p>四张再一次跑北京的时候，在北京留了一天。<br>何玉请四张吃饭。<br>何玉看起来有些奇怪，说话吞吞吐吐。<br>四张不耐烦，有事你就直说，跟我还用得着客气？<br>何玉说，我男朋友做生意，需要一笔钱周转，否则他过不了这个坎。<br>四张一愣，你什么时候交的男朋友？我怎么不知道？<br>何玉有些惭愧，我不想跟你说，我怕说了你难受。<br>四张沉默。<br>何玉说，他借了高利贷。<br>四张点了根烟，问，缺多少钱。<br>何玉鼓足勇气，说，十万。<br>四张抽了两口烟，给我五天，五天之后，我打你银行卡上。<br>四张说着就起身走了，留下何玉愣在原地。  </p><p>回到山东，四张把卡车卖了，加上自己的积蓄，凑了十万块给何玉。<br>我们都骂他，你脑残了？你不想想，万一何玉那个什么男朋友是个骗子呢？<br>四张无所谓的笑笑，我感觉，那男的百分百是骗子，好男人就是他妈再难，也不会向自己的女人开口要钱。<br>我们都惊呆了，你丫知道还借给她？<br>四张说，她要的东西，我没法拒绝。再说，让她上上课也好，她哪都好，就是太单纯。<br>我们再一次惊呆，她单纯？我看啊，是你傻逼。<br>四张切了一声，大智若愚，聪明还是傻逼，得分事儿。  </p><p>卖了卡车之后，四张又回到了原来的运输公司，继续打工。<br>一样勤勤恳恳，任劳任怨。<br>两个月后，何玉打电话给四张，哭着说，她男朋友不见了，电话也不接，他是个骗子。我对不起你。<br>四张说，不就十万块钱吗？有什么大不了的。花十万块，让你长长记性，值了。<br>何玉在电话里泣不成声。  </p><p>四张最爱跑的一条线，就是从山东到北京，他说，总觉得何玉在哪，哪立马就不一样了。就算何玉在撒哈拉，撒哈拉也能凭空生出喷泉来。就算何玉在索马里，索马里就立马变成天上人间。<br>何玉却消失了一段时间，再也没有联系四张，不知道是不是因为觉得自己就是个扫把星，总是拖累四张，因此故意远离四张的生活。  </p><p>又到了冬天。<br>四张依旧跑着长途，这次他拉着一车泡面跑北京，天寒地冻，高速公路上的积雪刚刚撒过盐，几乎都融化了，但是风很大。四张顺风撒尿的时候，尿柱射到了几百米外的广告牌上。<br>四张过了收费站口，猛地踩了刹车，他看见一个熟悉的身影，站在一望无际的高速公路隔离带旁边，冻得瑟瑟发抖，是何玉。<br>四张头发都炸起来了，他的车堵在高速公路入口，自己跳下去，几乎是飞到何玉面前，一把抱住何玉。<br>何玉整个人冻得就跟个冰美人一样，四张抱着何玉的时候打了个冷战，四张又生气又心疼，你他妈在这干嘛？<br>何玉泣不成声，我在这等了你三天了。晚上就在收费站里睡。我算错了时间，可我又不敢走，怕错过你。<br>四张疯了，你不会打个电话吗？<br>何玉说，我总是给你打电话，打电话给你都没好事，这一次我想见你。<br>四张紧紧地抱住何玉，直到高速公路路口堵成一排的车集体狂摁喇叭。  </p><p>四张开着大货车，行驶在冰雪皑皑的高速公路上。<br>何玉坐在副驾驶，身上裹着四张的军大衣，正在吃着一碗热气腾腾的泡面。<br>何玉吃完泡面，掏出两万块钱给四张。<br>四张生气了，你这是干什么？<br>何玉说，这是我这段时间攒的，还欠你八万，以后我就跟着你跑长途，给你打工，给你洗衣服，给你做饭。<br>四张傻了，你疯了，跑长途这是女人干的活吗？<br>何玉恨铁不成钢，从小到大，你怎么总是抓不到我的重点？我的重点在后半句，给你洗衣服，给你做饭！<br>四张愣愣地看着何玉，傻了。<br>何玉双颊都冻伤了，泛着红光，认真地看着四张。<br>大卡车远远地往前飞奔。  </p><p>今年，四张又买了一辆卡车，取了个名字，叫“何玉号”。<br>被同行取笑，你以为你开的是驱逐舰吗？<br>四张说，我开的就是驱逐舰，只属于我和我老婆的驱逐舰，一切坏人坏事统统退避。  </p><p>四张讲完了自己的故事，大家忍不住给她鼓掌。<br>四张憨笑，其实这也不算玩命爱一个姑娘，离着玩命还早呢。我只是觉得，既然爱了，就用点力，用点力总不会是坏事。<br>这个时候，一个女孩大着肚子走过来，走到四张身边。<br>四张吓坏了，你怎么来了？<br>女孩很娇羞，开玩笑似的，我想你了啊。<br>我们都愣住。<br>四张有些尴尬，跟大家介绍，这是我老婆，何玉。<br>我们都站起来，一起喊，嫂子好。<br>何玉被眼前的阵势吓了一跳，你们好，你们好，有空来家里喝酒。<br>四张笑得很欠揍，明目张胆秀恩爱。  </p><p>生命中，有些错过，最后成为了错过。<br>而有些错过，因为两个人的勇敢，又变成了相遇。<br>我们都期待美满的故事，但其实恰恰是靠着我们的勇气，让故事变得美满，让爱人就离着自己一个枕头的距离，有时候甚至是负20厘米的距离。<br>男人应该玩命爱一个姑娘。<br>好姑娘也值得被男人玩命去爱。<br>爱情，本来就是勇敢者的游戏。<br>如果你不够勇敢，你很快就会出局。<br>如果你够勇敢，此刻转个身，就能抱住你所爱的人吧。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;玩命的追一姑娘&quot;&gt;&lt;a href=&quot;#玩命的追一姑娘&quot; class=&quot;headerlink&quot; title=&quot;玩命的追一姑娘&quot;&gt;&lt;/a&gt;玩命的追一姑娘&lt;/h3&gt;&lt;p&gt;和朋友们聚会，大家决定玩一个游戏。&lt;br&gt;找一个主题，然后讲一段自己的真实经历，看看谁的经历最有起承
      
    
    </summary>
    
      <category term="短文" scheme="http://quiryrain.tk/categories/%E7%9F%AD%E6%96%87/"/>
    
    
      <category term="青春" scheme="http://quiryrain.tk/tags/%E9%9D%92%E6%98%A5/"/>
    
      <category term="付出" scheme="http://quiryrain.tk/tags/%E4%BB%98%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>那年刚好17岁</title>
    <link href="http://quiryrain.tk/230128515/"/>
    <id>http://quiryrain.tk/230128515/</id>
    <published>2019-02-25T08:54:44.000Z</published>
    <updated>2019-03-05T13:32:48.677Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX1+7G0KcWCyxFkBmDDmhklUBBiom83v/uOoomxs+8XIUrRwEAUgre3UVHWNZvoc6uBgGKJ7CFVWSnLOQw6byLj3NFBXa8cA/f36b5fOve2we96Bb6fcsfDN94kMqJamAR88Sh0bHHZR1yr/YoMMO1om9IEckyZTa+uH4z7HD84AzQ72TBkRveo3el4f2O+a/vZEAslkKbUbpduOS2SXtZ92BXshDXO40ygqYSAnr+pr3HEX4mmTm3cZ77DeG7muzBje2ZH0sxjYJY2hGhsCFY5KK894TGnv9c2d/qCbOGTzt9K1VvM1jr5QmjXKCi1YVb4Q+yLCLzQMs6J5ApTatXWe46yPmKjorbdmpXBohItDzQbYWC1e+5xmJyPAt2GQo2V/3J+mnesDBJD7HyDRUGw+TYfQzf8mTtmMh5bhVb2+iJsjaHzza9jY6RXS0XWxrjKrhG9t6OrBK+H6ItDwHl5DyQKBaR6NbZNKWrE9lpBlf5hMd/oWophnhrQgzhApMALJaQ4iSslieFQ7vtgy514djV6i4SR369d/i7QNMby8LEaNkbYiFReq2P4MFh5ZRJNBHBdDej3UpS+9ZzeApRcFmyQQ+3TSZGkbsDLH0syicHFi9CTBRDEtmCnWuPRzVi5XrY5gCkifTfBcNYc/AWlqB9255EMpgDm9WTrCYfRbQYriEosQCYVM9m1TdFWSrd3nYiCM0QwtXbGgrpdl/WcCV3P+l7Vmf5p6G6j1xR0e0+Ng/2gEbQ2cVemlgKXCbu2f7MudxPC2ZYtd3yTZFPif/4DiB1/pWxvkHbZXtZsEE9vrOtWC9OCrpgNed7trhCRVDyjnpagMsIcR1o321kXojQpOd5lD4DbAWUkLbnn0gWjVZ99e66FrRJe/erid29rZwPm716Vr/mBUgp2+ImKupGAZFixO/qtJL/sCt1+86BkWLMm8+1yPXRlsl9+S7KDuKLHMhywtLkOL0MSusmfIqFgkF86nPyKnoMhngFVqYQYFF03HBT04vvwcAjhtJT9G1iGEXCCS5xVK69BNGeNfZ9JmP5aGcp5qH4zsM0ufeQMjssxQpWrNEpk1GezQoWZgUE9kQGbTbZljwTc/h19JLIDwcNLeYaUvou0+trVXstuj0SmYJ4EYTIrT/6NGNMBNfT2ItqB8HvafG1hBYUqDzYUzJt5iTBISn5GS1JZ9+HKVWho3wx9LAAkY17QdeSGwFCI41YGZ5pHftk0dt0/H2CceQPygb0LYP2DZtHI8Yv+7/omq9KLiu6f7Ixa7JeeC+nJuBXO3OTKzhSEECkaByGh0eQONPbHkTWy9Hg+QgP2gI1WKOXFY3Ua648MjFkgcZCJiDxXEz00FzVyvbBe4/GqwZP/zatl6wZpqCKlb9hJukxlc2Z5LVHf5N8O3DNuJPtu2bDa02W3IPeHT65S2VCiX80r3SdNWpe48X4CL4G2cP8ag4ARh/m/xZjUughrHQ3LTqHKXdxWexVAwvCi+QWYsAWu2GpZCmBCiXzjRXrcnmnLPxZ73uQCpcBqici8fBce+DQw6gYhHcuwRviNaS2/9ByijbGfP3bMf0D0JFSpYc476N7WBEI/iNYsBMl4HgtEw84VTzkl2nS86/gqoMNfZdB4aWSxQw8VLyopEPRroqg8x5afG5GbpGbGdrnIztYZEqvPqLWzKn+lCCrBaIA9+v97wCuCk3W29WaKeS/9oJxDr2JhFFEBvyh0qlSbvKNHw8fL7jOvaotwzmFjM1ildq2RvzD7yzENdZ9Ck3z2e3pLMhi3ZTlz2ldynfK7NPBD9ymmXi3/fIKghvejVQxTTpQu2en1fWBsVd+oBROh4nwYTS4bGMdoB2xrOHgElZXIunKBcMmokFdbGVytlskFik7jDDT5+oBZYXpotksW+B19veDPRlhHOdyTy+HITjtJu2okfRrwOuvJrlSxevhzKi/iNX8OW3jPgUAtTn9zPlhjjGen1+Qg0q2TO/RA9qMNhB/7OBU4Bx4vbyPQ1eJU00HkNjOsrny3+rfAfOd/RzY/Xemyy54vCfYFaJPvbcsb59m7rowXtlWEoDGleStFoFqmPtp7dlAFg0gqvBv82iX+ZBClFT7DvDE8ig39D+yszrzLe7OGGNH2uep0BtO6h53WCLKlWqI0mqLd9oIXOvO0VRdRNSrIMZre18UzmAjFk/WwupWPhGrFZ++J2oRE9vbnqPPC2600eOlJ1nvgVHx9mRUWCwBX6x7HhB/Rkb6Fs2Oq8Uzgow4avqWTWVPeTru5AQL4dzEf7+aXD8yiF+6mO5Wq/y/2gR4hmjSnah8NDnhFbvSJiKv2xF9U83Wlx/FDFWNQJqZ78w6+S2k1YWmr47EueEuZ3wRi3HgtgSpSsn9VXnBV/F5bUU5ojlg9lqLQSML4DWZakILuMGr62yr7KnzhUWsppcaPjwa2UfTE+Qktfis9DiDdSLxB7YboQARW0H83Z39pAxDzQzLKH2Q1r3GmSRIfX41H3hgCYmRwQtK9OYK+peTB9RrvuAY7yVNYrpnBtbaXCJW/rMbcdO8hBj/xTXYO8417AcWM6YvVw1tJEE4tdiD5QwW1UFvTPkmtv/q8tAI7LSGymPKl1I4/EXm98JEbherJGL2CLORkGzwgm+zN13NZkM8QuOURyOVAkWKudEsImm49TlKjWBtEfm+fSl3fi43Uuti5MZOsQMJHAwpwOB6RyAYB3DcnU870W6BpiKw2K3hhasLuOmFYk2MDW1oZfcbl23cr2qI12KztJFhNYWezIRVKP7OAwcUWFWCUs/tHWZBdruVaXZzP1iYfWEiZzuQ7XEl1+yoomq0i1CnPcnnjYJCoA6SLP2xE/AHYESkDOzbkd7x12fz2t+Bh0zBfvBCjM9hjaMn14HCjl1qxjyUSdKEz2f0CcaEWZ2plTLNUxbeN/8knJUrznYj8FZ6HfWjp0RiOez3Zg1Z8Vdp9NLCMelY1axlHNdZuF5OwnppUDPTAhrroFZRLH0hJgrUmbNhMlMG42NYrGxBSHXXhPrA8SMlM2NnohKP8sQGIQpshfdjvfmEAf/OtaO9gr5yJCG/ybIk+X6ovUGq/fvD2wIxZwjk8zlzycBTeJ+i9q0ruDZdxE66HD5itNcVJDrXijhtCuLA2NGwwCEb23F0000MlCe2LXfQLFMye7vlefHqhmhjMR+K61dcBfi1JLnKZSl6FNj+Jv1rzzPgsBwbd5zFhA7eT++f/MHtPlG8yi/PstbflvAENMbqXjRmvfrRU5+QUSve79N0w8iKN5PoFYtdAgQvx0PPURggMrzivH0cocGxIe1E48u7XiKXnZZW8YBQxv+UFtl22b+cfuu/V7Jg3uRnj6Nyjr2xIFrDmA5rewclIm3uKbJ7q7w3OKMe9IblYZCW9InvySD7Jgzaz6oZF2GO5GqibdqiKND/tCCKfAzQk3NA76AB+OB/TfpbnkYcjFFPT5d3K6vg2tBQw7e+j/L8MxKD0Pc+XvLClmJ8LKQimEDYWzN2wWxDwVAOuWltFlwgId4f0yr87/OJBlBAObYrzmZBIpmV5CqpQ7bP4Gtfn70H8oZeeEsDe/UqeGpZLDB22EM/HTepa8HpDYJFPFv8RFbMmke5hznIHT390T7bONyO1xWOHviwe9nlL/ZPzht5EGOGttDmxFlDOU6oUNoawLwVJdUEdWeXYH3xI1I5gQuu3JjAWwbpzF0BSj1TR8JXdu+3FsxnNUsB5ESkMoqcxbCLJcUrYQeHdPw/CffYJCcWYk+Xzve5cwwXavJNlpH51Ya2k2277YftSxzJ2MhJ/Q9QXKzAU0up1owCkYbf9QAb7zMx4HoFNpqwy+D9zWC7je42EduQ1Mf4A==</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      关于个人的一些回忆
    
    </summary>
    
      <category term="梦廊" scheme="http://quiryrain.tk/categories/%E6%A2%A6%E5%BB%8A/"/>
    
    
      <category term="回忆" scheme="http://quiryrain.tk/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="青春" scheme="http://quiryrain.tk/tags/%E9%9D%92%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python进制转换</title>
    <link href="http://quiryrain.tk/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>http://quiryrain.tk/进制转换/</id>
    <published>2019-02-25T08:39:42.000Z</published>
    <updated>2019-03-05T13:32:48.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python中实现的进制间的转换"><a href="#Python中实现的进制间的转换" class="headerlink" title="Python中实现的进制间的转换"></a>Python中实现的进制间的转换</h3><blockquote><p>在python中可以使用Python的内置函数进行进制间的转换。<br>  bin()：其他进制转二进制<br>  oct()：其他进制转八进制<br>  int()：其他进制转十进制<br>  hex()：其他进制转十六进制  </p></blockquote><h3 id="二进制、八进制、十六进制的形式"><a href="#二进制、八进制、十六进制的形式" class="headerlink" title="二进制、八进制、十六进制的形式"></a>二进制、八进制、十六进制的形式</h3><ul><li>二进制：以“0b”开头，如：0b111为十进制的7</li><li>八进制：以“0”开头，如：026为十进制的22</li><li>十六进制：以“0x”开头，如：0x1f为十进制的31</li></ul><h3 id="二进制、八进制、十六进制对照表"><a href="#二进制、八进制、十六进制对照表" class="headerlink" title="二进制、八进制、十六进制对照表"></a>二进制、八进制、十六进制对照表</h3><p><img src="/userImages/dzb.png" alt="对照表"></p><h3 id="二进制、八进制、十六进制转十进制"><a href="#二进制、八进制、十六进制转十进制" class="headerlink" title="二进制、八进制、十六进制转十进制"></a>二进制、八进制、十六进制转十进制</h3><p>使用int()函数，第一个参数是要转换的数字，类型为字符串，第二个参数是该数几进制的数，转化结果为一个十进制的数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">二进制转十进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0b1111'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">15</span></span><br><span class="line">八进制转十进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'67'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">55</span></span><br><span class="line">十六进制转十进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0x1f'</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">31</span></span><br></pre></td></tr></table></figure></p><h3 id="八进制、十进制、十六进制转二进制"><a href="#八进制、十进制、十六进制转二进制" class="headerlink" title="八进制、十进制、十六进制转二进制"></a>八进制、十进制、十六进制转二进制</h3><p>使用bin()函数，需要先将八进制、十六进制转换为十进制，然后才能转换为二进制，<br>即八进制/十六进制 —&gt; 十进制 —&gt; 二进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">八进制转二进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'016'</span>,<span class="number">8</span>))</span><br><span class="line"><span class="string">'0b1110'</span></span><br><span class="line">十进制转二进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">14</span>)</span><br><span class="line"><span class="string">'0b1110'</span></span><br><span class="line">十六进制转二进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'0xe'</span>,<span class="number">16</span>))</span><br><span class="line"><span class="string">'0b1110'</span></span><br></pre></td></tr></table></figure></p><h3 id="二进制、十进制、十六进制转八进制"><a href="#二进制、十进制、十六进制转八进制" class="headerlink" title="二进制、十进制、十六进制转八进制"></a>二进制、十进制、十六进制转八进制</h3><p>使用oct()函数可以直接进行进制的转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">二进制转八进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">0b1110</span>)</span><br><span class="line"><span class="string">'016'</span></span><br><span class="line">十进制转八进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">14</span>)</span><br><span class="line"><span class="string">'016'</span></span><br><span class="line">十六进制转八进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">0xe</span>)</span><br><span class="line"><span class="string">'016'</span></span><br></pre></td></tr></table></figure></p><h3 id="二进制、八进制、十进制转十六进制"><a href="#二进制、八进制、十进制转十六进制" class="headerlink" title="二进制、八进制、十进制转十六进制"></a>二进制、八进制、十进制转十六进制</h3><p>使用hex()函数，需要先将二进制、八进制转换为十进制，然后才能转换为十六进制，<br>即二进制/八进制 —&gt; 十进制 —&gt; 十六进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">二进制转十六进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'0b1110'</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">'0xe'</span></span><br><span class="line">八进制转十六进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'016'</span>,<span class="number">8</span>))</span><br><span class="line"><span class="string">'0xe'</span></span><br><span class="line">十进制转十六进制：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">14</span>)</span><br><span class="line"><span class="string">'0xe'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python中实现的进制间的转换&quot;&gt;&lt;a href=&quot;#Python中实现的进制间的转换&quot; class=&quot;headerlink&quot; title=&quot;Python中实现的进制间的转换&quot;&gt;&lt;/a&gt;Python中实现的进制间的转换&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在
      
    
    </summary>
    
      <category term="Python杂记" scheme="http://quiryrain.tk/categories/Python%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="二进制" scheme="http://quiryrain.tk/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="八进制" scheme="http://quiryrain.tk/tags/%E5%85%AB%E8%BF%9B%E5%88%B6/"/>
    
      <category term="十六进制" scheme="http://quiryrain.tk/tags/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python位运算</title>
    <link href="http://quiryrain.tk/Python%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://quiryrain.tk/Python位运算/</id>
    <published>2019-02-25T08:23:00.000Z</published>
    <updated>2019-03-05T13:32:48.680Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的位运算是程序设计中对位模式或二进制的一元和二元操作。<br>按位运算就是把数字转换为机器语言—以二进制形式表示  </p><h2 id="Python中的位运算有哪些？"><a href="#Python中的位运算有哪些？" class="headerlink" title="Python中的位运算有哪些？"></a>Python中的位运算有哪些？</h2><p>在Python中，按位运算符有左移运算符（&lt;&lt;）、右移运算符（&gt;&gt;）、按位与运算（&amp;）、按位或运算（|）、按位取反运算（~）、异或运算符，其中按位取反运算符为单目运算符</p><h3 id="按位左移运算符（-lt-lt-）"><a href="#按位左移运算符（-lt-lt-）" class="headerlink" title="按位左移运算符（&lt;&lt;）"></a>按位左移运算符（&lt;&lt;）</h3><p>在机器语言中，任何形式均以二进制的形式进行表示：<br>举例：7&lt;&lt;2<br>二进制为：111 左移两位：11100 最后结果为：28<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7&lt;&lt;2</span><br><span class="line">28</span><br></pre></td></tr></table></figure></p><h3 id="按位右移运算符（-gt-gt-）"><a href="#按位右移运算符（-gt-gt-）" class="headerlink" title="按位右移运算符（&gt;&gt;）"></a>按位右移运算符（&gt;&gt;）</h3><p>具体的使用形式和左移一样。<br>举例：<br>7&gt;&gt;2<br>28&gt;&gt;2<br>二进制：7的二进制为：111，右移两位后为001，结果即为1<br>28的二进制为:11100，右移两位后为00111，结果为7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7&gt;&gt;2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 28&gt;&gt;2</span><br><span class="line">7</span><br></pre></td></tr></table></figure></p><p>由于正数和负数的二进制形式不同，所以此处特别说下以下两个运算。在计算机中，负数的二进制形式是其正数的补码形式，此处不做特别的说明，需要知道的以下给出一个<a href="http://www.cnblogs.com/junsky/archive/2009/08/06/1540727.html" target="_blank" rel="noopener">链接</a>.</p><h3 id="按位与运算（-amp-）"><a href="#按位与运算（-amp-）" class="headerlink" title="按位与运算（&amp;）"></a>按位与运算（&amp;）</h3><p>正数和正数的与运算：<br>举例： 7&amp;9<br>二进制：7的二进制为:0111，9的二进制为:1001<br>说明：根据（1&amp;1=1、1&amp;0=0、0&amp;1=0、0&amp;0=0）即相同位置同为1结果即为1，否者为0，由此可见7&amp;9的二进制形式为：0111&amp;1001 == 0001<br>正数与负数的与运算：<br>举例：-7&amp;5<br>二进制：-7：1001，5：0101。结果为1<br>说明：此处你可能要问-7的二进制和9的二进制不是相同吗？答案是不相同，在机器中-7的二进制为：11111111 11111111 11111111 11111001，9的二进制为：00000000 00000000 00000000 00001001。同样根据上文的同为1既为1，所以结果为1。运算最后结果的二进制形式从最左侧的第一个0前的1开始，直至右侧结尾，将此数转换为10进制，重点是，此处不是依次相加，而是依次相减，得到的结果最后加上负号即为最后运算的结果。<br>负数与负数的与运算：<br>举例：-5&amp;-8<br>二进制：-5：11111011，-8：11111000结果为-8<br>说明：你可能会很疑惑，此处的结果明明是11111000，结果怎么是-8.原因是-5&amp;-8的二进制形式为：11111011&amp;11111000 == 11111000，从最左侧的第一个0前的1开始，直至右侧结尾，将此数转换为10进制，重点是，此处不是依次相加，而是依次相减，得到的结果最后加上负号即为最后运算的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7&amp;9</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; -7&amp;5</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; -5&amp;-8</span><br><span class="line">-8</span><br></pre></td></tr></table></figure></p><h3 id="按位或运算（-）"><a href="#按位或运算（-）" class="headerlink" title="按位或运算（|）"></a>按位或运算（|）</h3><p>或运算和与运算十分相似，只是依据的逻辑运算不同，或运算的依据逻辑是相同位置有个为1结果即为1<br>正数与正数的或运算：<br>举例：7|9<br>二进制：7：0111，9：1001<br>说明：根据（1|0=1、1|1=1、0|1=1、0|0=0）可知，7|9的二进制形式为：0111|1001，结果为：15<br>负数与正数的或运算：<br>举例：-7|9<br>二进制：-7：11111001，9：00001001<br>说明：从最左侧的第一个0前的1开始的数，转化为十进制，需要进行的是依次相减运算。<br>负数与负数的或运算：<br>举例：-5|-8<br>二进制：-5：11111011，-8：11111000结果为-5<br>说明：运算最后结果的二进制形式从最左侧的第一个0前的1开始，直至右侧结尾，将此数转换为10进制，重点是，此处不是依次相加，而是依次相减，得到的结果最后加上负号即为最后运算的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7|9</span><br><span class="line">15</span><br><span class="line">&gt;&gt;&gt; -7|9</span><br><span class="line">-7</span><br><span class="line">&gt;&gt;&gt; -5|-8</span><br><span class="line">-5</span><br></pre></td></tr></table></figure></p><h3 id="按位取反运算符（-）"><a href="#按位取反运算符（-）" class="headerlink" title="按位取反运算符（~）"></a>按位取反运算符（~）</h3><p>将二进制数+1之后乘以-1,假如x的二进制数是y，x的按位翻转是-(y+1)<br>举例：-3<br>去反后：2<br>二进制：-3：11111101 取反操作：-（11111101+1）==-（11111110）==2  </p><h3 id="异或运算符（-）"><a href="#异或运算符（-）" class="headerlink" title="异或运算符（^）"></a>异或运算符（^）</h3><p>二进制对应位相加，不进位。依据逻辑为：（1^1=0、1^0=1、0^1=1、0^0=0）,同样依照，如果两个数中一正一负，则最后的二进制转十进制时依次相减，如果同正同负，则相加<br>正数和正数的异或运算：<br>举例：7^9<br>二进制：7：0111，9：1001<br>说明：7^9的二进制形式为：0111^1001 == 1110，十进制为：14<br>负数和正数的异或运算：<br>举例：-3^4<br>二进制：-3：11111101，4：00000100<br>说明：-3^4的二进制形式为：11111101^00000100 == 11111001,根据说明可以知道结果为-（222-1）=-7<br>负数和负数的异或运算：<br>举例：-7^-9<br>二进制：-7：11111001，-9：11110111<br>说明；-7^-9的二进制形式为：11111001^11110111 == 00001110，根据说明可以知道结果为222+2*2+2=14<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7^9</span><br><span class="line">14</span><br><span class="line">&gt;&gt;&gt; -3^4</span><br><span class="line">-7</span><br><span class="line">&gt;&gt;&gt; -7^-9</span><br><span class="line">14</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python中的位运算是程序设计中对位模式或二进制的一元和二元操作。&lt;br&gt;按位运算就是把数字转换为机器语言—以二进制形式表示  &lt;/p&gt;
&lt;h2 id=&quot;Python中的位运算有哪些？&quot;&gt;&lt;a href=&quot;#Python中的位运算有哪些？&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Python杂记" scheme="http://quiryrain.tk/categories/Python%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="位运算" scheme="http://quiryrain.tk/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
</feed>
